<hide>
@RenderPage("_header.cshtml")
@{  var helpers = CreateInstance("../shared/_helpers.cshtml"); }
</hide>
@using Connect.Razor.Blade;
@using System.Linq;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;

<trim>
<h2>Working with Data</h2>
  <p>
    If you want to work with <strong>data</strong> (like from a database) instead of <strong>@helpers.TutLink("content", "content")</strong> (which are data items assigned to one instance) you need to get it from somewhere and then loop through it. Typical data comes from:
  </p>
  <ul>
    <li>the current App, using <code>App.Data[...]</code></li>
    <li>a query in the App, using <code>App.Query[...]</code></li>
    <li>a SQL database - either through an <code>App.Query</code>, from a <code>DataSource</code> or from a <code>SqlReader</code></li>
    <li>a CSV file - either through an <code>App.Query</code>, from a <code>DataSource</code> or from your own code</li>
    <li>DNN objects like the users - either through an <code>App.Query</code>, from a <code>DataSource</code>, from DNN-objects or from your own code</li>
    <li>a JSON or XML file - usually loaded from your own code</li>
    <li>a WebService - usually loaded from your own code</li>
  </ul>
  <p>
    Once you have the data, you will usually want to loop-and-show, which is easiest using <code>dynamic</code> objects, so you can just type things like <code>@@Content.FirstName</code> to show the properties. 
  </p>
</trim>


<h2>Basic Examples</h2>

<ol>
  @helpers.TutorialLink("Data from the App using App.Data", "data210")
  @helpers.TutorialLink("Data from the App using App.Query", "data220")
  @helpers.TutorialLink("CSV data from an App.Query", "data310")
  @helpers.TutorialLink("CSV data from an DataSource", "data320")

  @helpers.TutorialLink("CSV data from an DataSource", "data310")
  @helpers.TutorialLink("CSV data from an DataSource", "data310")
</ol>

<trim>
<hr>
<h3>Basic Example from App.Data</h3>
<p>
  The easiest data to access comes from the current environment - like from the App or from DNN itself. The following example gets <code>Persons</code> data from the <code>App.Data["Persons"]</code> and just loops through them. This is similar to the example in the @helpers.TutLink("content", "content") tutorial, except that the data comes from the <code>App.Data</code> instead of the current <em>instance</em> <code>Data</code>.
</p>
</trim>
<ul>
@foreach(var person in AsDynamic(App.Data["Persons"])) {
  @ShowPersonListItem(person)
}
</ul>


@helper ShowPersonListItem(dynamic person) {
  <li>
    @if(Text.Has(person.Mugshot)) {
      <img src="@person.Mugshot?w=50&h=50&mode=crop" width="50px" style="border-radius: 50%">
    }
    @person.FirstName @person.LastName
  </li>
}

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>