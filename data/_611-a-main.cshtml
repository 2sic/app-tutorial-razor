@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
@using System.Linq;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("_header.cshtml", new { Sys = Sys }) 
</hide>


<trim>
<div class="row">
  <div class="col-lg-7">
    <h2>Basic List Details using Code - with separate Details-File</h2>
    <p>
      Very often you have a list of items, and then a details-page showing just one item. In this example, we'll just use code to do this (so no visual query) - just so you understand the principle. This example splits the list/details templates into 3 files, which is easier to manage. File 1 choses what should happen, file 2 contains the list, and file 3 the details. 
    </p>
    <p>
      Since we'll look for the desired item in code, we'll use LINQ. To learn more about that, check out the @Sys.TutLink("LINQ Tutorials", "linq").
    </p>
  </div>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
</div>
</trim>

@Sys.SourceCode.ResultAndSnippetStart("list-detail", "Source of List.cshtml", "Source of Details.cshtml" )
  @{
    // check if we have a url-parameter called "id" with a value
    int id;
    // showdetails will be true, if urlId had a number
    var showDetails = Int32.TryParse(CmsContext.Page.Parameters["id"], out id);
  }
  @if(!showDetails) {
    @Html.Partial("_611-list.cshtml")
  } else {
    @Html.Partial("_611-details.cshtml", new { Id = id })
  }
@Sys.SourceCode.ResultEnd("file:611-list", "file:611-details" )


@Sys.PageParts.FooterWithSource()
