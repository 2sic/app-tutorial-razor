@inherits AppCode.Razor.AppRazor<AccordionOneModel>
@using ToSic.Razor.Blade
@using AppCode.Data
@using AppCode.Razor
@using AppCode.Source
@using AppCode.Tutorial
@*
  This is the main entry point for the tutorial group.
  It will either
  - Switch to multi-accordion-view
  - Show the accordion itself with all the sections inside
*@
@{
  // Check for Recursions, to prevent infinite loops!
  var recursions = Model.Recursions + 1;
  if (recursions > 5) {
    throw new Exception("Recursion limit reached");
  }

  // Get the accordion specs - Either the "Page" or the Section inside the page
  var tutGroup = Model.TutPage;

  // Get Accordion code
  var accordion = GetService<Accordion>().Setup(Model.Sys, /* Model.Variant */ "", item: tutGroup);
}

@if (tutGroup != null) {
  // Check if this is a "Page" - WIP
  if (tutGroup.IsNotEmpty("Accordions")) {
    @Html.Partial("./Accordion Multi.cshtml", new AccordionMultiModel {
      TutorialGroup = tutGroup,
      Recursions = recursions,
      Accordion = accordion
    });
  } else {
    @Html.Partial("./Section Block.cshtml", new SectionBlockModel {
      Accordion = accordion,
      TutorialGroup = tutGroup,
      SkipPageTools = false,
      Recursions = recursions
    })
  }
  // If it's empty, show info / toolbar to admin only
} else if (MyUser.IsSystemAdmin) {
  <div class="alert alert-danger" @Kit.Toolbar.Empty().New("TutorialGroup", prefill: new {
    NameId = Model.NameId
  })>
    The Tutorial Group <strong>@Model.NameId</strong> was not found.
    <br />
    This is something you probably want to create next.
    Use the Toolbar to create.
  </div>
}

@* Add a padding - if ever this may be impractical, then we can change it to be controlled by a parameter *@
<p>&nbsp;</p>
