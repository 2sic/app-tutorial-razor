@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
@*
  This is the main entry point for the tutorial group.
  It will either
  - Switch to multi-accordion-view
  - Show the accordion itself with all the sections inside
*@
@{
  // Check for Recursions, to prevent infinite loops!
  var recursions = MyModel.Int("Recursions", required: false, fallback: 0) + 1;
  if (recursions > 5) {
    throw new Exception("Recursion limit reached");
  }
}
@{
  // Get the accordion specs - Either the "Page" or the Section inside the page
  var accSpecs = AsItems(App.Data["TutorialGroup"]).FirstOrDefault(i => i.String("NameId") == MyModel.String("NameId"));

    // Reuse existing Accordion code or generate new
    var accordion = GetCode("./Accordion.cs").Setup(MyModel.Code("Sys"), MyModel.String("Variant", required: false), item: accSpecs);
}

@if (accSpecs != null) {
  // Check if this is a "Page" - WIP
  if (accSpecs.IsNotEmpty("Accordions")) {
    @Html.Partial("./Accordion Multi.cshtml", new { TutorialGroup = accSpecs, recursions, accordion });
  } else {
    @Html.Partial("./Section Block.cshtml", new { accordion, AccordionSpecs = accSpecs, skipPageTools = false, recursions })
  }
  // If it's empty, show info / toolbar to admin only
} else if (MyUser.IsSystemAdmin) {
  <div class="alert alert-danger" @Kit.Toolbar.Empty().New("TutorialGroup", prefill: new {
    NameId = MyModel.String("NameId")
  })>
    The Accordion Set <strong>@MyModel.String("NameId")</strong> was not found.
    <br />
    This is something you probably want to create next.
    Use the Toolbar to create.
  </div>
}

@* Add a padding - if ever this may be impractical, then we can change it to be controlled by a parameter *@
<p>&nbsp;</p>
