@inherits Custom.Hybrid.Razor12
@using System.Text.RegularExpressions;
@using ToSic.Razor.Blade;
@{
  // Get parameters
  var titleInParams = DynamicModel.Title as string;
  var filePath = DynamicModel.Path;
  var file = DynamicModel.File;
  var titlePath = DynamicModel.TitlePath as string;
  var wrap = DynamicModel.Wrap != null ? (Boolean)DynamicModel.Wrap : false;
  var snipId = DynamicModel.Snippet as string;

  // Prepare variables which are initialized in try/catch
  var title = "";
  var source = "";
  int size = 0;
  var language = "";
  var thingType = (snipId == null ? "file" : "snippet");

  // Wrap all in a try/catch to Prevent the whole page from failing just because this part may have trouble
  try
  {
    if (file != null) {
      if (file.IndexOf(".") == -1) {
        file = "_" + file + ".cshtml";
      }
      var lastSlash = filePath.LastIndexOf("/");
      filePath = filePath.Substring(0, lastSlash) + "/" + file;
    }
    var fileInTitle = titlePath + file;
    title = titleInParams ?? "Source Code of " + (file == null ? "this " + thingType : fileInTitle);
    var paramSize = DynamicModel.Size;
    var test = Convert.Json;
    size = this.Convert.ToInt(paramSize, fallback: 600);

    language = "ace/mode/" + (DynamicModel.Language ?? FindAce3LanguageName(filePath));

    // load source code
    var fullPath = filePath;
    if (filePath.IndexOf(":") == -1 && filePath.IndexOf(@"\\") == -1) {
  #if NETCOREAPP
    // This is the Oqtane implementation - cannot use Server.MapPath
    var hostingEnv = GetService<Microsoft.AspNetCore.Hosting.IHostingEnvironment>();
    var pathWithTrimmedFirstSlash = filePath.TrimStart(new [] { '/', '\\' });
    fullPath = System.IO.Path.Combine(hostingEnv.ContentRootPath, pathWithTrimmedFirstSlash);
  #else
    // The .net 451 implementation
    fullPath = Server.MapPath(filePath);
  #endif
    }

    source = System.IO.File.ReadAllText(fullPath);

    // Keep only the snippet if specified
    source = KeepOnlySnippet(source, snipId);

    // trim unnecessary comments
    source = ProcessHideTrimSnippet(source);
  }
  catch
  {
    <h2>Error showing file source</h2>
    <div class="alert alert-warning">
      Where was a problem showing the file source for @filePath
    </div>
  }

  // Low risk stuff outside of try/catch
  var rndId = Guid.NewGuid().ToString();


}

<script src="//cdn.jsdelivr.net/ace/1.2.6/noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="//cdn.jsdelivr.net/ace/1.2.6/noconflict/ext-language_tools.js" async="false"></script>

@if (snipId == null) {
  <hr>
  <h2>@title</h2>
  <p>
    Below you'll see the source code of the @thingType. Note that we're just showing the main part, and hiding some parts of the file which are not relevant for understanding the essentials. 
  </p>
} else {
  <br>
  <br>
}

<pre id='@("source" + rndId)' style="height: @(size + "px"); font-size: 16px">@source</pre>

@* 2sxclint:disable:no-inline-script *@
<script>
    var editor = ace.edit('@("source" + rndId)', { 
      useWrapMode: true,
      maxLines: 30
    });
    editor.setTheme("ace/theme/sqlserver");
    editor.session.setMode("@language");
    editor.session.setOptions({
      wrap: @(wrap ? "true" : "false"),
    })
</script>

@functions {
  // Determine the ace9 language of the file
  string FindAce3LanguageName(string filePath) {
    var extension = filePath.Substring(filePath.LastIndexOf('.') + 1);
    switch (extension)
    {
      case "cs": return "csharp";
      case "js": return "javascript";
      case "json": return "json";
      default: return "razor";
    }
  }

  string KeepOnlySnippet(string source, string id) {
    if (string.IsNullOrWhiteSpace(id)) return source;
    // trim unnecessary comments
    var patternSnippet = @"(?:<snippet id=""" + id + @""">)(?<contents>[\s\S]*?)(?:</snippet>)";
    var match = Regex.Match(source, patternSnippet);
    if (match.Length > 0) {
      return match.Groups["contents"].Value;
    }
    return source;
  }

  string ProcessHideTrimSnippet(string source) {
    // trim unnecessary comments
    var patternTrim = @"(?:<trim>)([\s\S]*?)(?:</trim>)";

    source = Regex.Replace(source, patternTrim, m => { 
      var part = Tags.Strip(m.ToString());
      return Text.Ellipsis(part, 40, "... <!-- unimportant stuff, hidden -->");
    });

    // hide unnecessary parts
    var patternHide = @"(?:<hide>)([\s\S]*?)(?:</hide>)";
    source = Regex.Replace(source, patternHide, m => "<!-- unimportant stuff, hidden -->" );

    // remove snippet markers
    var patternSnipStart = @"(?:</?snippet)([\s\S]*?)(?:>)";
    source = Regex.Replace(source, patternSnipStart, "");
    return source;
  }
}