@inherits Custom.Hybrid.Razor14
<hide>
@Html.Partial("_header.cshtml")
@{
  var linker = CreateInstance("../shared/Helpers.cs");
  var hlp = CreateInstance("../shared/Helpers.cs");
}
</hide>

<div class="row">
  <div class="col-lg-7">
    <h2>Reuse Code Snippet with <code>Func&lt;thing,dynamic&gt;</code> Template Delegate</h2>
    <p>If you just need a quick simple snippet, Template Delegates are the way to go. 
      They are very limited so only ideal for simple stuff. More complex stuff should use
      @linker.TutLink("Razor Components with @Html.Partial and DynamicModel", "reuse110"). 
    </p>
  </div>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
</div>
<trim>

<h2>Basic Concept of <code>Func</code></h2>
<div class="alert alert-primary">
  We will start here, and continue with <strong>Template Delegates</strong> further down.
</div>
<p>
  To start and understand the concept, let's just do some basic string to string functions.
</p>

<h3>Basic Example: <code>string</code> returning string</h3>
<p>
  This example using a <code>string</code> parameter.
  This is why the the first parameter in <code>Func&lt;...</code>
  is a string. 
</p>
<snippet id="func-string-to-string">
@{
  // Simple string to string delegate
  Func<string, string> MakeIsCool = (name) => {
    return name + " is cool ðŸ˜Ž";
  };
}
<ul>
  <li>@MakeIsCool("iJungleboy")</li>
  <li>@MakeIsCool("Douglas Adams")</li>
  </li>
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "func-string-to-string", Size = 250 }) 
</hide-silent>

<h3>Second Example: Multiple parameters</h3>
<p>
  This example using a <code>string</code> and a <code>bool</code> parameter.
</p>
<div class="alert alert-warning">
  Note also that any HTML we return is not handled as expected. 
</div>
<snippet id="func-2string-to-string">
@{
  // Simple string to string delegate
  Func<string, bool, string> MaybeCool = (name, isCool) => {
    return isCool ? name + " is <strong>cool ðŸ˜Ž</strong>" : name + " is <em>ok ðŸ˜‰</em>";
  };
}
<ul>
  <li>@MaybeCool("iJungleboy", false)</li>
  <li>@MaybeCool("Douglas Adams", true)</li>
  </li>
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "func-2string-to-string", Size = 250 }) 
</hide-silent>


<h3>Third Example: Returning HTML</h3>
<p>
  This example is similar, but handles HTML correctly.
</p>
<div class="alert alert-warning">
  Note this example correctly shows <strong>bold</strong> and <em>emphasis</em>.
</div>
<snippet id="func-2string-to-html">
@{
  // Simple string to string delegate
  Func<string, bool, dynamic> MaybeCoolHtml = (name, isCool) => {
    return Html.Raw(name + (isCool ? " is <strong>cool ðŸ˜Ž</strong>" : " is <em>ok ðŸ˜‰</em>"));
  };
}
<ul>
  <li>@MaybeCoolHtml("iJungleboy", false)</li>
  <li>@MaybeCoolHtml("Douglas Adams", true)</li>
  </li>
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "func-2string-to-html", Size = 250 }) 
</hide-silent>

<hr>

<h2><code>Func&lt;thing, dynamic&gt;</code> Template Delegate</h2>
<div class="alert alert-primary">
  Now let's look at <strong>Template Delegates</strong>.
</div>
<p>
  Template Delegates allow you to use inline HTML in your function. 
  To make this possible, a bit of magic happens automatically, 
  so a limitations is that you cannot use named parameters. 
  So there is no <code>(name) =&gt;</code>. 
  And since you can't name your parameters, you only get one parameter called <code>item</code>.
</p>


<h3>Basic Example: <code>string</code> generating Html</h3>
<p>
  This example using a <code>string</code> parameter.
  This is why the the first parameter in <code>Func&lt;...</code>
  is a string.
</p>
<div class="alert alert-info">
  Note that in the following code <code>item</code> is the thing passed into the function.
</div>
<snippet id="func-string">
@{
  var normalText = "this is text, it doesn't have tags";
  var htmlText = "this string <em>has</em> html <strong>tags</strong>";

  // Simple Hybrid (Dnn/Oqtane) Template Delegate
  Func<string, dynamic> BoldLi = @<li>
    <strong>
      @Html.Raw(item)
    </strong>
  </li>;
}
<ul>
  @BoldLi(normalText)
  @BoldLi(htmlText)
  @BoldLi("this is just a bold line")
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "func-string", Size = 300 }) 
</hide-silent>

<h3>Complex Data with <code>Func&lt;dynamic,dynamic&gt;</code> Template Delegate</h3>
<p>
  If you have multiple values, you often want to merge in into one object like this:
</p>
<snippet id="reuse-function">
@{
  // Simple Hybrid (Dnn/Oqtane) Template Delegate
  Func<dynamic, dynamic> FancyLink = @<li>
    <strong style="color: @item.Color">
      @Html.Raw(item.Label)
      @if(item.AddStar) {
        <text>ðŸŒŸ</text>
      }
    </strong>
  </li>;
}
<ul>
  @FancyLink(new { Label = normalText, Color = "red", AddStar = true })
  @FancyLink(new { Label = htmlText, Color = "lime", AddStar = false })
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "reuse-function", Size = 300 }) 
</hide-silent>




<hide>
@Html.Partial("../shared/_PreCodeFooter.cshtml")
@Html.Partial("../shared/_source-code.cshtml", new { Path, Size = 1000 }) 
</hide>