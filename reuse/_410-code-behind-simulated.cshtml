@* Note that the Code-Behind features requires this @inherits statement *@
@inherits Custom.Hybrid.Razor14

@* TEMP *@
@using ToSic.Razor.Blade;

<hide>
@Html.Partial("_header.cshtml")
@{  
  var linker = CreateInstance("../shared/Helpers.cs");
  var hlp = CreateInstance("../shared/Helpers.cs");
  string sourceCode = hlp.ShowCodeFile; // must be typed, because Html.Partial on Oqtane can't use dynamic variables
}
</hide>

<trim>
<h2>Code-Behind Strategy in Razor Templates</h2>
<p>
  Code-Behind is a concept where you place the code file separately from the razor file itself. 
  This helps you place large chunks of logic in another file. 

  2sxc had a built-in feature in v11 but it couldn't be transferred to Oqtane ðŸ’§, so it was deprecated in v12.
</p>
<p>
  But you can still use this strategy if you need it. Just create a <code>SomeCode.cs</code> file and use that. 
</p>
</trim>

<hr>
<h2>Calling a function from the simulated Code-Behind</h2>
<trim>
<p>This two examples do the following: </p>
<ul>
  <li>Call the function <code>Hello()</code></li>
  <li>This creates a special alert-div using a Helper called <code>Message(...)</code></li>
</ul>
</trim>
@{
  var snipPrefix = "prefix";
}
@functions {
  dynamic AutoSnippetButton(string prefix, string title, string name, bool selected) {
    return Tag.Button(title).Class("nav-link " + (selected ? "active" : "")).Id(prefix + "-tab")
      .Attr("data-bs-toggle", "tab")
      .Attr("data-bs-target", "#" + prefix + "-" + name)
      .Type("button")
      .Attr("role", "tab")
      .Attr("aria-controls", prefix + "-" + name)
      .Attr("aria-selected", selected.ToString().ToLower());
  }

  dynamic AutoSnippetTabs(string prefix) {
    return Tag.Ul().Class("nav nav-pills").Attr("role", "tablist").Wrap(
      Tag.Li().Class("nav-item").Attr("role", "presentation").Wrap(
        AutoSnippetButton(prefix, "Output", "home", true)
      ),
      Tag.Li().Class("nav-item").Attr("role", "presentation").Wrap(
        AutoSnippetButton(prefix, "Source Code", "profile", false)
      )
    );
  }
}
@AutoSnippetTabs(snipPrefix)
@* <ul class="nav nav-pills" role="tablist">
  <li class="nav-item" role="presentation">
    @AutoSnippetButton(snipPrefix, "Output", "home", true)
  </li>
  <li class="nav-item">
    @AutoSnippetButton(snipPrefix, "Source", "profile", false)
  </li>
</ul>*@
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="@snipPrefix-home" role="tabpanel" aria-labelledby="@snipPrefix-tab">
    Result
  </div>
  <div class="tab-pane fade" id="@snipPrefix-profile" role="tabpanel" aria-labelledby="@snipPrefix-profile-tab">
    Source Code  
  </div>
</div> 

<autosnippet id="basic-safe-url">
@{
  var code = CreateInstance("CodeBehindSimulated.cs");
}
<div>Hello from Code Behind: <strong>@code.Hello()</strong></div>

@code.Message("Message in a special format")
</autosnippet>

<hide>
@Html.Partial("../shared/_PreCodeFooter.cshtml")
@Html.Partial(sourceCode, new { Path }) 
@Html.Partial(sourceCode, new { 
  Path,
  File = "CodeBehindSimulated.cs",
}) 
</hide>