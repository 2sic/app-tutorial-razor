@* Note that the Code-Behind features requires this @inherits statement *@
@inherits Custom.Hybrid.Razor14

@* TEMP *@
@using ToSic.Razor.Blade;

<hide>
@Html.Partial("_header.cshtml")
@* Sys must always be an exact copy of this line, so that we could search/replace *@
@{ var Sys = CreateInstance("../shared/Helpers.cs").Init(Path); }

@{  
  string sourceCode = Sys.ShowCodeFile; // must be typed, because Html.Partial on Oqtane can't use dynamic variables
}
</hide>

<trim>
<h2>Code-Behind Strategy in Razor Templates</h2>
<p>
  Code-Behind is a concept where you place the code file separately from the razor file itself. 
  This helps you place large chunks of logic in another file. 

  2sxc had a built-in feature in v11 but it couldn't be transferred to Oqtane ðŸ’§, so it was deprecated in v12.
</p>
<p>
  But you can still use this strategy if you need it. Just create a <code>SomeCode.cs</code> file and use that. 
</p>
</trim>

<hr>
<h2>Calling a function from the simulated Code-Behind</h2>
<trim>
<p>This two examples do the following: </p>
<ul>
  <li>Call the function <code>Hello()</code></li>
  <li>This creates a special alert-div using a Helper called <code>Message(...)</code></li>
</ul>
</trim>
@Sys.SourceCode.SnippetStart("code-behind")
  @{
    var code = CreateInstance("CodeBehindSimulated.cs");
  }
  <div>Hello from Code Behind: <strong>@code.Hello()</strong></div>

  @code.Message("Message in a special format")
@Sys.SourceCode.SnippetEnd("code-behind")



<hide>
@Html.Partial("../shared/_PreCodeFooter.cshtml")
@Html.Partial(sourceCode, new { Path }) 
@Html.Partial(sourceCode, new { 
  Path,
  File = "CodeBehindSimulated.cs",
}) 
</hide>