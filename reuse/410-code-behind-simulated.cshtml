@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("/shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })  
</hide>

@*
  NOTE: 2023-08-30 I believe this tutorial isn't in use any more, but must verify
*@

<trim>
  <h2>Code-Behind Strategy in Razor Templates</h2>
  <p>
    Code-Behind is a concept where you place the code file separately from the razor file itself. 
    This helps you place large chunks of logic in another file. 

    2sxc had a built-in feature in v11 but it couldn't be transferred to Oqtane ðŸ’§, so it was deprecated in v12.
  </p>
  <p>
    But you can still use this strategy if you need it. Just create a <code>SomeCode.cs</code> file and use that. 
  </p>

  <h2>Calling a function from the simulated Code-Behind</h2>
  <p>This two examples do the following: </p>
  <ul>
    <li>Call the function <code>Hello()</code></li>
    <li>This creates a special alert-div using a Helper called <code>Message(...)</code></li>
  </ul>
</trim>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "file:./CodeBehindSimulated.cs")).SnipStart())
  @{
    var code = CreateInstance("CodeBehindSimulated.cs");
  }
  <div>Hello from Code Behind: <strong>@code.Hello()</strong></div>

  @code.Message("Message in a special format")
@snip.SnipEnd()


@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })
