@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("../shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })  

  @* If we have ?Rzr14 in the url, show that code to verify it works *@
  @if (Sys.SourceCode.ShouldShowAltCodeFile()) {
    @Sys.SourceCode.ShowAltCodeFile(Html);
    return;
  }
</hide>

<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
      <h2>Reuse code with .cs files (new in 2sxc 10.01)</h2>
      <p>
        Starting with 2sxc 10.01 <code>GetCode()</code> can also be used with .cs files,
        from both razor pages as well as WebApi controllers.
        This allows you to create shared code which can be used in Razor and WebApi controllers.
      </p>
    </div>
  </div>


<h2>Using shared library of simple functions</h2>
<trim>
<p>
  The example takes a cs file <code>FunctionsBasic.cs</code> with shared code in a class <code>FunctionsBasic</code>.
  This example uses a simple C# class, so the code only has what's in it.
</p>
</trim>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#demo1,file:FunctionsBasic.cs")).SnipStart())
  @{
    var lib = GetCode("FunctionsBasic.cs");
  }
  <div>Hello from FunctionsBasic: @lib.SayHello()</div>
@snip.SnipEnd()


<h2>Using a different Class from a library files</h2>
<trim>
<p>
  The example takes a cs file with shared code, but gets the class <code>Second</code>.
</p>
</trim>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#demo1,file:FunctionsBasic.cs")).SnipStart())
  @{
    var lib2 = GetCode("FunctionsBasic.cs", className: "Second");
  }
  <div>Hello from FunctionsBasic: @lib2.SayHello()</div>
@snip.SnipEnd()




<h2>Using shared code with context</h2>
<trim>
<p>
  Often you may need context - like the <code>Dnn</code> or <code>App</code> objects.
  We made this easy by defining a base class you can inherit from, called <code> Custom.Hybrid.Code14 </code> (previously <code>ToSic.Sxc.Dnn.DynamicCode</code>).

  If you use that as your base-class, all existing context is automatically attached, allowing you to
  access variables like <code>App</code>.
</p>
</trim>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#demo1,file:FunctionsWithContext.cs")).SnipStart())

  @{
    var powerLib = GetCode("FunctionsWithContext.cs");
  }
  <div>
    <img loading="lazy" src='@powerLib.QrPath("https://2sxc.org")' width="75px">
  </div>
@snip.SnipEnd()



<hide>
<h2>Using shared libraries in WebApi Controllers</h2>
<p>
  The mechanism above also works in WebApi Controllers (if you have 2sxc 10.01+).
  Note that specifically in WebApi you can only use <code>GetCode(...)</code> for <code>.cs</code> files.
</p>
</hide>


@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "file:./api/SharedCodeController.cs,file:./FunctionsBasic.cs")).SnipStart())
  <p>
    Click to see the result of a WebApi call with the shared code:
    <button type="button" class="btn btn-primary" onclick="callApiWithSharedCode(this)">
      Call WebApi
    </button>
  </p>
  
  <script>
    function callApiWithSharedCode(context) {
      $2sxc(context).webApi.fetchJson('app/auto/reuse/api/sharedcode/hello')
        .then(function (results) {
          console.log(results);
          alert(results);
        });
      return false;
    }
  </script>
@snip.SnipEnd()

@* 2sxclint:disable:no-inline-script *@
@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })
