@inherits Custom.Hybrid.Razor14
<hide>
  @using ToSic.Razor.Blade;
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("_header.cshtml", new { Sys = Sys })
@{
  var imgUrl = App.Path + "/settings/demo.png";
}

  @functions {
    dynamic ShowCurrentSrc(string id)
    {
      return Tag.Div().Class("alert alert-light").Wrap(
      Tag.Div("To see the currentSrc change, make the window narrow, reload, and then drag it to become larger."),
      Tag.Code().Id(id + "-label")
      );
    }
  }

</hide>

<trim>
<div class="row mb-5">
  <div class="col-lg-7">
    <h2>Merge image settings</h2>
    <p>
      The following examples merge custom settings with predefined <code>Settings</code> which are defined in 2sxc, and can be re-configured in any site and app.
      We'll use <code>Settings.Images.Content</code> which has the following configuration:
    </p>
    <ol>
      <li>Width: @Settings.Images.Content.Width</li>
      <li>Height: @Settings.Images.Content.Height</li>
      <li>AspectRatio: @Settings.Images.Content.AspectRatio</li>
      <li>Quality: @Settings.Images.Content.Quality</li>
    </ol>
  </div>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
</div>
</trim>

<h3>Image with merged settings</h3>
<p>This example uses the configuration as is, to create an image according to specs in <code>customImageSettings</code></p>

@Sys.SourceCode.SnippetStart("merge-settings-1")
  @{
    var customImageSettings = AsDynamic(new {
      Height = 100,
      ResizeMode = "Stretch",
      Quality = 50
    });
    // Merged settings, first one has highes priority
    var mergedSettings = AsDynamic(customImageSettings, Settings.Images.Content);
  }
  <img loading="lazy" src='@Link.Image(imgUrl, mergedSettings)'>
@Sys.SourceCode.SnippetEnd("merge-settings-1")

@Sys.PageParts.FooterWithSource()
