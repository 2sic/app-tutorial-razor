@inherits Custom.Hybrid.Razor12
@using ToSic.Sxc.Services;
@{
  var imgSvc = GetService<IImageService>();
}
<hide>
@Html.Partial("_header.cshtml")
@{  
  /* Internal remarks for the tutorial developers
    To reall see the images loading they must have different names in each tutorial.
    Otherwise some image is already loaded because of a different example, and the user won't see lazy-loading on resize.
  */
}
</hide>

<trim>
  <h1>Best-Possible Image for Every Screen &amp; Device</h1>
  <h2>...using <code>img</code>, <code>srcset</code> and <code>picture</code></h2>
  <p>
    HTML has a few ways to show an image, and you should know which way is best. Discover: 
  </p>
  <ol>
    <li><code>img</code> for your standard image</li>
    <li>enhancing images with size-detection using <code>srcset</code> and <code>sizes</code></li>
    <li><code>picture</code> for images in different sizes, which the browser picks based on the screen and capabilities</li>
  </ol>

  <div class="alert alert-info">
    These examples are optimized. 
    The browser will only load new images, if they are larger than the previous one. 
    So to see the effect, you must make the browser vary small (narrow), reload the page, and then drag it wider. 
    <br>
    <br>
    Some examples show the currently loaded URL below it, and the difference may be very small as it changes. So look closely üîç
  </div>

  <hr>
  <h2>Responsive <code>img</code> with <code>srcset</code> and <code>sizes</code> To Load Different Pictures</h2>
  <p>
    With <code>srcset</code> on the <code>img</code> tag you can tell the browser to load different images based on screen size. 
    To really get the hang of this, best check out <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images" target="_blank">the MDN docs</a>.
  </p>


</trim>

<hide>
  <h3>What you need to know about <code>srcset</code></h3>
  <ol>
    <li>
      <strong>Important: </strong> If the browser already has a large image, it won't load smaller ones. 
      So to see this in action, you have to start with a tiny browser window, loading the 250px - then make it larger to see bigger pictures load. 
    </li>
    <li>The main picture in <code>src</code> is used in all old browsers</li>
    <li>You can also use <code>srcset</code> to specify different resolutions for retina displays.</li>
    <li><strong>Important: </strong> the width specified in the <code>max-width</code> is the view/page width, not the image width</li>
  </ol>
  <h3>Example with Different Files for Each Resolution</h3> 
</hide>

<snippet id="img-srcset">
  <img class="img-fluid" alt="Image SrcSet Demo"
    src="@App.Path/img/assets/jellyfish-img-srcset-1000.jpg"
    srcset="@App.Path/img/assets/jellyfish-img-srcset-2000.jpg 2000w,
            @App.Path/img/assets/jellyfish-img-srcset-1000.jpg 1000w,
            @App.Path/img/assets/jellyfish-img-srcset-500.jpg 500w,
            @App.Path/img/assets/jellyfish-img-srcset-250.jpg 250w,">
</snippet>
<code id="img-srcset-label"></code>

<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset", Size = 160 }) 
</hide-silent>

<h3>Example with Automatically Resized Files for Each Resolution</h3>

<snippet id="img-srcset-auto">
  @{ var tomatoPicUrl = App.Path +  "/img/assets/pexels-pixabay-533288.jpg"; }
  @* This uses the IImageService created at the top of this file *@
  @imgSvc.Img(tomatoPicUrl)
</snippet>
<code id="img-srcset-auto-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto", Size = 100 }) 
</hide-silent>

<h3>Example with Automatic Resize and Special Settings</h3>
<p>
  The following example (and the ones after this) will use a flatter image to make it easier to see all the samples. 
  To achieve this, we must create <code>ResizeSettings</code> for this. It will be based on the default <code>Content</code> settings.
</p>
<snippet id="img-srcset-auto2">
  @{
    var flatSettings = imgSvc.ResizeSettings(Settings.Images.Content, aspectRatio: "8:1");
  }
  @imgSvc.Img(tomatoPicUrl, settings: flatSettings)
</snippet>
<code id="img-srcset-auto2-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto2", Size = 100 }) 
</hide-silent>


<h3>Example with Automatic Resize and Special SrcSets</h3>
<p>
  The default settings contains a list of default resizes - which is why the examples before just worked. 
  You can also specify your own, according to the specs in the
  <a href="https://docs.2sxc.org/net-code/images/srcset.html" target="_blank">srcset docs</a>. 
</p>
<snippet id="img-srcset-auto-srcset">

  @imgSvc.Img(tomatoPicUrl, settings: flatSettings, srcSet: "1600,1200,1000,900,800,700,600,500,400")
</snippet>
<code id="img-srcset-auto-srcset-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto-srcset", Size = 100 }) 
</hide-silent>


<h3>Automatic Resize with Custom <code>alt</code> and <code>class</code> </h3>

<snippet id="img-srcset-auto3">
  @imgSvc.Img(tomatoPicUrl, settings: flatSettings,
    imgAlt: "SEO Text", imgClass: "border border-primary")
</snippet>
<code id="img-srcset-auto3-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto3", Size = 100 }) 
</hide-silent>


<h3>Automatic Resize with Detailed Control</h3>
<snippet id="img-srcset-auto4">
  @{
    var imgControlled = imgSvc.Img(tomatoPicUrl, settings: flatSettings);
    imgControlled.ImgTag.Id("Some-Id").Style("Width: 75%");
  }
  @imgControlled
</snippet>
<code id="img-srcset-auto4-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto4", Size = 120 }) 
</hide-silent>


<h3>Automatic Resize with Full Control</h3>
<snippet id="img-srcset-auto5">
  @{
    var imgFullControl = imgSvc.Img(tomatoPicUrl, settings: flatSettings);
  }
  <img src="@imgFullControl.Url" srcset="@imgFullControl.SrcSet" title="Hover to see this">
</snippet>
<code id="img-srcset-auto5-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-srcset-auto5", Size = 100 }) 
</hide-silent>

<script>
  showChangingSrc("#img-srcset img", "#img-srcset-label")
  showChangingSrc('#img-srcset-auto img', '#img-srcset-auto-label');
  showChangingSrc('#img-srcset-auto-srcset img', '#img-srcset-auto-srcset-label');
  showChangingSrc('#img-srcset-auto2 img', '#img-srcset-auto2-label');
  showChangingSrc('#img-srcset-auto3 img', '#img-srcset-auto3-label');
  showChangingSrc('#img-srcset-auto4 img', '#img-srcset-auto4-label');
  showChangingSrc('#img-srcset-auto5 img', '#img-srcset-auto5-label');
</script>


@*
  TODO: @2mh - pls put the picture examples in an own file
*@


<trim>
  <hr>
  <h2>Browser-Capabilities <code>picture</code> with different formats</h2>
  <p>
    The perfect image depends on browser capabilities. 
    The following example will get modern browsers a webp image (which is smaller/faster) and normal browsers a jpg. 
  </p>
</trim>

<hide>
  <h3>What you need to know about <code>picture</code></h3>
  <ol>
    <li>It's just a wrapper for the <code>img</code></li>
    <li>You always need an <code>img</code> tag inside it, and this is what old browsers like IE6 will take even if they don't understand <code>picture</code></li>
    <li>The <code>img</code> tag also caries the <code>alt</code> description, width, size, styles etc. which is used for all images</li>
    <li>The <code>source</code> tags contain rules like <code>type</code> or <code>media</code> which the browser uses to pick the best image</li>
    <li>The <code>source</code> also supports the same <code>srcset</code> and <code>sizes</code> just like the <code>img</code> tag</li>
    <li><strong>Important: </strong> you must use <code>srcset</code> and not <code>src</code> on the <code>source</code> tags</li>
    <li><strong>Important: </strong> Order matters! Put the <code>source</code> tags first in the order you need, as the first match will be taken.</li>
  </ol>
</hide>

<snippet id="demo-picture-formats">
  <picture>
    <source type="image/webp" srcset="@App.Path/img/assets/koi-400.webp">
    <source type="image/png" srcset="@App.Path/img/assets/koi-400.png">
    <img style="width: 40%;" src="@App.Path/img/assets/jellyfish-1000.jpg">
  </picture>
</snippet>
<br>
<code id="demo-picture-formats-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "demo-picture-formats", Size = 120 }) 
</hide-silent>

<trim>
  <hr>
  <h2>Responsive <code>picture</code> with many resolutions</h2>
  <p>
    The perfect image is often different depending on the screen size. 
    The following example will get two different sizes, depending on the screen size. 
    Try resizing the screen and watch the network (F12) to see when the other sizes are loaded. 
  </p>
</trim>

<snippet id="demo-picture-srcset">
  <picture>
    <source type="image/webp"
      srcset="@App.Path/img/assets/koi-img-srcset-2000.webp 2000w,
        @App.Path/img/assets/koi-img-srcset-1000.webp 1000w,
        @App.Path/img/assets/koi-img-srcset-500.webp 500w,
        @App.Path/img/assets/koi-img-srcset-250.webp 250w,"
      sizes="(max-width: 300px) 250px, (max-width: 600px) 500px, (max-width: 1200px) 1000px, 2000px">
    <source type="image/png"
      srcset="@App.Path/img/assets/jellyfish-img-srcset-2000.jpg 2000w,
        @App.Path/img/assets/jellyfish-img-srcset-1000.jpg 1000w,
        @App.Path/img/assets/jellyfish-img-srcset-500.jpg 500w,
        @App.Path/img/assets/jellyfish-img-srcset-250.jpg 250w,"
      sizes="(max-width: 300px) 250px, (max-width: 600px) 500px, (max-width: 1200px) 1000px, 2000px">
    <img class="img-fluid" src="@App.Path/img/assets/jellyfish-img-srcset-1000.jpg" alt="Picture srcset demo">
  </picture>
</snippet>
<code id="demo-picture-srcset-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "demo-picture-srcset", Size = 320 }) 
</hide-silent>



<hr>
<h2>Automatically Resized Files &amp Formats</h2>

<snippet id="pic-auto">

@imgSvc.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg")
</snippet>
<code id="pic-auto-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "pic-auto", Size = 100 }) 
</hide-silent>

<hr>
<h2>Automatically Resized Bits with More Control</h2>
<snippet id="pic-auto-control1">
@{
  var picControlled = imgSvc.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg");
}
<picture>
  @picControlled.SourceTags
  @picControlled.ImgTag.Id("some-id").Style("width: 75%").Title("Mouseover this!")
</picture>
</snippet>
<br>
<code id="pic-auto-control1-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "pic-auto-control1", Size = 160 }) 
</hide-silent>


<hr>
<h2>Automatically Resized Bits with Lots of Control</h2>
<snippet id="pic-auto-control2">
@{
  var picFullControl = imgSvc.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg");
}
<picture>
  @foreach(var st in picFullControl.SourceTags){
    @st
  }
  <img src="@picFullControl.Url" style="width: 50%" class="border border-primary">
</picture>
</snippet>
<br>
<code id="pic-auto-control2-label"></code>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "pic-auto-control2", Size = 200 }) 
</hide-silent>
<hide>




<script>
  showChangingSrc('#demo-picture-formats img', '#demo-picture-formats-label');
  showChangingSrc('#demo-picture-srcset img', '#demo-picture-srcset-label');
  showChangingSrc('#pic-auto img', '#pic-auto-label');
  showChangingSrc('#pic-auto-control1 img', '#pic-auto-control1-label');
  showChangingSrc('#pic-auto-control2 img', '#pic-auto-control2-label');
</script>

  @* 
  Photo by <a href="https://unsplash.com/@dorianbaumann?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Dorian Baumann</a> on <a href="https://unsplash.com/s/photos/aescher?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>

  Werdenberg: Photo by <a href="https://unsplash.com/@calina?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Georg Bommeli</a> on <a href="https://unsplash.com/s/photos/buchs-sg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
  
  *@
@Html.Partial("../shared/_source-code.cshtml", new { Path, Size = 1200 }) 

  <div class="alert alert-info">
    <strong>Credits: </strong>
    <ol>
      <li>
        Koi fish Photo by <a href="https://unsplash.com/@("@")agusprianto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">agus prianto</a> on <a href="https://unsplash.com/s/photos/colorful-shrimp?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
      </li>
      <li>
        Jellyfish Photo by <a href="https://unsplash.com/@("@")kkkaran?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Karan Karnik</a> on <a href="https://unsplash.com/s/photos/sea-life?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
      </li>
    </ol>
  </div>
</hide>