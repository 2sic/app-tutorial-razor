@inherits Custom.Hybrid.Razor14
<hide>
  @using ToSic.Razor.Blade;
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("/shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })
  @{
    /* Internal remarks for the tutorial developers
      To reall see the images loading they must have different names in each tutorial.
      Otherwise some image is already loaded because of a different example, and the user won't see lazy-loading on resize.
      */
  }
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
      <h2>Best practices using the Image Service</h2>
      <p>Learn about the best practices for using the image service and more. Our goals are:</p>
      <ol>
        <li>Make sure every image is perfectly sized as needed</li>
        <li>Multiple sizes are provided for various use cases</li>
        <li>Labels and configs made by the editor (for example, setting a priority corner) are respected by the resizer
        </li>
      </ol>
    </div>
  </div>


@Html.Partial("../shared/KitBaseClassInfoBox.cshtml", new { ServiceName = "Image", Service = "IImageService" })

@*
  TODO: @2dg - put in /img/tips/Snip-....cshtml
*@

@Html.Partial("../Shared/Accordion/Accordion One.cshtml", new { Sys, Variant = ".Dyn", NameId = "img-tips" })



<h2>Image with URL vs. Field in <code>img</code> tag</h2>
<p>
  As learned in the previous tutorials the <code>img</code> tag can be created out of URLs.
  The image service can also be used with Fields. The field will contain the URL as well as additional Metadata like the
  description or what part of the picture is important (the Crop-Anchor).
</p>
<p>
  To get the most out of 2sxc and its image configuration options
  it's best to use the image object instead of URLs. By using the image configuration options,
  the settings can be easily retrieved from the corresponding image.
</p>

<hide>
  @{
    var Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>

@((snip = Sys.SourceCode.TabsWithSnippet(tabs: "Generated HTML Left,Generated HTML Right")).SnipStart())
  <div class="row">
    <div class="col-md">
      <p><strong>Picture from <code>Content.Image</code></strong></p>
      @* Picture from Content.Image *@
      @Kit.Image.Img(Content.Image)
    </div>
    <div class="col-md">
      <p><strong>Picture from <code>Field</code> containing crop anchor and alt text</strong></p>
      @* Picture from Field containing crop anchor and alt text *@
      @Kit.Image.Img(Content.Field("Image"))
    </div>
  </div>
@Sys.SourceCode.Invisible()
  @{
    var resultHtmlLeft = Sys.SourceCode.ShowResultImg(Kit.Image.Img(Content.Image));
    var resultHtmlRight = Sys.SourceCode.ShowResultImg(Kit.Image.Img(Content.Field("Image")));
  }
@snip.SnipEnd(resultHtmlLeft, resultHtmlRight)

<h2>Picture with URL vs. Field in <code>picture</code> tag</h2>
<p>
  As learned in the previous tutorials the <code>picture</code> tag can be created out of URLs.
  The image service can also be used with Fields. The field will contain the URL as well as additional Metadata like the
  description or what part of the picture is important (the Crop-Anchor).
</p>
<p>
  To get the most out of 2sxc and its image configuration options
  it's best to use the image object instead of URLs. By using the image configuration options,
  the settings can be easily retrieved from the corresponding image.
</p>

@((snip = Sys.SourceCode.TabsWithSnippet(tabs: "Generated HTML Left,Generated HTML Right")).SnipStart())
  <div class="row">
    <div class="col-md">
      <p><strong>Picture from <code>Content.Image</code></strong></p>
      @* Picture from Content.Image *@
      @Kit.Image.Picture(Content.Image)
    </div>
    <div class="col-md">
      <p><strong>Picture from <code>Field</code> containing crop anchor and alt text</strong></p>
      @* Picture from Field containing crop anchor and alt text *@
      @Kit.Image.Picture(Content.Field("Image"))
    </div>
  </div>
@Sys.SourceCode.Invisible()
  @{
    resultHtmlLeft = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Image));
    resultHtmlRight = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image")));
  }
@snip.SnipEnd(resultHtmlLeft, resultHtmlRight)

<h2>Apply factor to the <code>picture</code> tag</h2>
<p>
  The Image Service offers multiple parameters for further customization of the images, such as the factor.
  The factor works as a resize multiplier for the image as for example (0.5).
  <br><br>
  Below you will find an example:
</p>

@((snip = Sys.SourceCode.TabsWithSnippet(tabs: "Generated HTML Left,Generated HTML Right")).SnipStart())
  <div class="row">
    <div class="col-md">
      <p><strong>Picture using the factor <code>0.5</code></strong></p>
      @Kit.Image.Picture(Content.Field("Image"), factor: 0.5)
    </div>
    <div class="col-md">
      <p><strong>Picture using the factor <code>5</code></strong></p>
      @Kit.Image.Picture(Content.Field("Image"), factor: 5)
    </div>
  </div>
@Sys.SourceCode.Invisible()
  @{
    resultHtmlLeft = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image"), factor: 0.5));
    resultHtmlRight = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image"), factor: 5));
  }
@snip.SnipEnd(resultHtmlLeft, resultHtmlRight)

<h2>Create multiple image variants</h2>
<p>
  The picture tag contains multiple configurations of images, which are called recipes in our ecosystem.
  The browser then chooses the optimal configuration based on the given srcset.

  Using the <code>.Recipe("")</code> method from the image service, you can easily add more size variants of your
  images.
  <br><br>
  Below you will find an example:
</p>

@((snip = Sys.SourceCode.TabsWithSnippet(tabs: "Generated HTML Left,Generated HTML Right")).SnipStart())
  <div class="row">
    <div class="col-md">
      <p><strong>Picture default recipe</strong></p>
      @* Picture using the default *@
      @Kit.Image.Picture(Content.Field("Image"))
    </div>
    <div class="col-md">
      <p><strong>Picture with variants for 2x and 3x of the image size</strong></p>
      @{
        var customRecipe = Kit.Image.Recipe("2*, 3*");
      }
      @* Picture using recipe with 2x and 3x variants *@
      @Kit.Image.Picture(Content.Field("Image"), recipe: customRecipe)
    </div>
</div>
@Sys.SourceCode.Invisible()
  @{
    resultHtmlLeft = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image")));
    resultHtmlRight = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image"), recipe: customRecipe));
  }
@snip.SnipEnd(resultHtmlLeft, resultHtmlRight)


<h2>Choose the optimal alt text</h2>
<p>
  By passing in the <code>Field</code> object, the picture tag will apply the alt text automatically.
  Unless your code specifies the <code>imgAlt</code> parameter, which would <em>override</em> any internal setting.
  <br>
  Because alt texts are not always defined in the settings, you can set a <code>imgAltFallback</code>
  to be used if the alt text is not defined.
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>

@((snip = Sys.SourceCode.TabsWithSnippet(tabs: "Generated HTML")).SnipStart())
  @{
    var fallbackAltText = "Fallback";
    var imageFieldWithAltText = Content.Field("Image");
    var optimalAltText = Text.First(imageFieldWithAltText.Metadata.Description, fallbackAltText);
  }
  <div>
    <p><strong>Image with optimal alt text (@optimalAltText)</strong></p>
    <div style="width: 25%;">
      @Kit.Image.Picture(imageFieldWithAltText, imgAltFallback: optimalAltText)
    </div>
  </div>
@Sys.SourceCode.Invisible()
  @{
   var resultHtml = Sys.SourceCode.ShowResultImg(Kit.Image.Picture(Content.Field("Image"), imgAltFallback: optimalAltText));
  }
@snip.SnipEnd(resultHtml)

@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })

