@inherits Custom.Hybrid.Razor14
<hide>
  @using ToSic.Razor.Blade;
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("_header.cshtml", new { Sys = Sys })
  @{
    /* Internal remarks for the tutorial developers
      To reall see the images loading they must have different names in each tutorial.
      Otherwise some image is already loaded because of a different example, and the user won't see lazy-loading on resize.
      */
  }
  @functions {
    dynamic ShowCurrentSrc(string id)
    {
      return Tag.Div().Class("alert alert-light").Wrap(
      Tag.Div("To see the currentSrc change, make the window narrow, reload, and then drag it to become larger."),
      Tag.Code().Id(id + "-label")
      );
    }
  }
</hide>

<hide-silent>
  test 2dm
</hide-silent>

<trim>
  <div class="row mb-5">
    <div class="col-lg-7">
      <h2>Browser-Capabilities <code>picture</code> with different formats</h2>
      <p>
        The perfect image depends on browser capabilities.
        The following example will get modern browsers a webp image (which is smaller/faster) and normal browsers a jpg.
      </p>
    </div>
    @Html.Partial("../shared/_DefaultInfoSection.cshtml")
  </div>
</trim>

@Html.Partial("../shared/_KitBaseClassInfoBox.cshtml", new { ServiceName = "Image", Service = "IImageService" })

<hide>
  <h3>What you need to know about <code>picture</code></h3>
  <ol>
    <li>It's just a wrapper for the <code>img</code></li>
    <li>You always need an <code>img</code> tag inside it, and this is what old browsers like IE6 will take even if they
      don't understand <code>picture</code></li>
    <li>The <code>img</code> tag also caries the <code>alt</code> description, width, size, styles etc. which is used
      for all images</li>
    <li>The <code>source</code> tags contain rules like <code>type</code> or <code>media</code> which the browser uses
      to pick the best image</li>
    <li>The <code>source</code> also supports the same <code>srcset</code> and <code>sizes</code> just like the
      <code>img</code> tag
    </li>
    <li><strong>Important: </strong> you must use <code>srcset</code> and not <code>src</code> on the
      <code>source</code> tags
    </li>
    <li><strong>Important: </strong> Order matters! Put the <code>source</code> tags first in the order you need, as the
      first match will be taken.</li>
  </ol>
</hide>

@Sys.SourceCode.SnippetStart("demo-picture-formats")
  @ShowCurrentSrc("demo-picture-formats")
  <picture>
    <source type="image/webp" srcset="@App.Path/img/assets/koi-400.webp">
    <source type="image/png" srcset="@App.Path/img/assets/koi-400.png">
    <img style="width: 40%;" src="@App.Path/img/assets/jellyfish-1000.jpg">
  </picture>
@Sys.SourceCode.SnippetEnd()

<trim>
  
  <h2>Responsive <code>picture</code> with many resolutions</h2>
  <p>
    The perfect image is often different depending on the screen size.
    The following example will get two different sizes, depending on the screen size.
    Try resizing the screen and watch the network (F12) to see when the other sizes are loaded.
  </p>
</trim>


@Sys.SourceCode.SnippetStart("demo-picture-srcset")
  @ShowCurrentSrc("demo-picture-srcset")
  <picture>
    <source type="image/webp" srcset="@App.Path/img/assets/koi-img-srcset-2000.webp 2000w,
          @App.Path/img/assets/koi-img-srcset-1000.webp 1000w,
          @App.Path/img/assets/koi-img-srcset-500.webp 500w,
          @App.Path/img/assets/koi-img-srcset-250.webp 250w,"
      sizes="(max-width: 300px) 250px, (max-width: 600px) 500px, (max-width: 1200px) 1000px, 2000px">
    <source type="image/png" srcset="@App.Path/img/assets/jellyfish-img-srcset-2000.jpg 2000w,
          @App.Path/img/assets/jellyfish-img-srcset-1000.jpg 1000w,
          @App.Path/img/assets/jellyfish-img-srcset-500.jpg 500w,
          @App.Path/img/assets/jellyfish-img-srcset-250.jpg 250w,"
      sizes="(max-width: 300px) 250px, (max-width: 600px) 500px, (max-width: 1200px) 1000px, 2000px">
    <img class="img-fluid" src="@App.Path/img/assets/jellyfish-img-srcset-1000.jpg" alt="Picture srcset demo">
  </picture>
@Sys.SourceCode.SnippetEnd()


<h2>Automatically Resized Files &amp Formats</h2>

@Sys.SourceCode.ResultStart("pic-auto", "Generated HTML")
  @ShowCurrentSrc("pic-auto")
  @Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg")
@Sys.SourceCode.ResultPrepare()
  @{
    var previewTag = Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg");
    var resultHtml = Sys.SourceCode.ShowResultImg(previewTag);
  }
@Sys.SourceCode.ResultEnd(resultHtml)


<h2>Automatically Resized With Custom Alt and Classes</h2>

@Sys.SourceCode.ResultStart("pic-auto-alt-class", "Generated HTML")
  @ShowCurrentSrc("pic-auto-alt-class")
  @Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg", imgAlt: "This is the ALT text", imgClass: "dummy-class")
@Sys.SourceCode.ResultPrepare()
  @{
    previewTag = Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg", imgAlt: "This is the ALT text",
        imgClass: "dummy-class");
    resultHtml = Sys.SourceCode.ShowResultImg(previewTag);
  }
@Sys.SourceCode.ResultEnd(resultHtml)


<h2>Automatically Resized Bits with More Control</h2>
@Sys.SourceCode.ResultStart("pic-auto-control1", "Generated HTML")
  @ShowCurrentSrc("pic-auto-control1")
  @{
    var picControlled = Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg");
  }
  <picture>
    @picControlled.Sources
    @picControlled.Img.Id("some-id").Style("width: 75%").Title("Mouseover this!")
  </picture>
@Sys.SourceCode.ResultPrepare()
  @{
    var previewString = "<picture> " + picControlled.Sources.ToString() + " " +
        picControlled.Img.Id("some-id").Style("width: 75%").Title("Mouseover this!").ToString() + "</picture>";
    resultHtml = Sys.SourceCode.ShowResultImg(previewString);
  }
@Sys.SourceCode.ResultEnd(resultHtml)


<h2>Automatically Resized Bits with Lots of Control</h2>

@Sys.SourceCode.ResultStart("pic-auto-control2", "Generated HTML")
  @ShowCurrentSrc("pic-auto-control2")
  @{
    var picFullControl = Kit.Image.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg");
  }
  <picture>
    @foreach (var st in picFullControl.Sources)
    {
      @st
    }
    <img src='@picFullControl.Src' style='width: 50%' class='border border-primary'>
  </picture>
@Sys.SourceCode.ResultPrepare()
  @{
    previewString = "<picture> ";
    foreach (var st in picFullControl.Sources) { previewString += st.ToString(); }
    previewString += "<img src='" + picFullControl.Src + "' style='width: 50%' class='border border-primary'>";
    previewString += "</picture>";
    resultHtml = Sys.SourceCode.ShowResultImg(previewString);
  }
@Sys.SourceCode.ResultEnd(resultHtml)

<script>
  // Activate the controls which show the current live src of each picture/image tag
  showChangingSrc('demo-picture-formats');
  showChangingSrc('demo-picture-srcset');
  showChangingSrc('pic-auto');
  showChangingSrc('pic-auto-alt-class');
  showChangingSrc('pic-auto-control1');
  showChangingSrc('pic-auto-control2');
</script>

@Sys.PageParts.FooterWithSource()
