@inherits Custom.Hybrid.Razor12
@using ToSic.Sxc.Services;
@using ToSic.Razor.Blade;
<hide>
@Html.Partial("_header.cshtml")
@{  
  /* Internal remarks for the tutorial developers
    To really see the images loading they must have different names in each tutorial.
    Otherwise some image is already loaded because of a different example, and the user won't see lazy-loading on resize.
  */
  var hlp = CreateInstance("../shared/Helpers.cs");
  var viewMd = AsDynamic((CmsContext.View.Metadata.OfType(hlp.TutViewMetadataType) as IEnumerable<dynamic>).FirstOrDefault());
}
@functions {
  // Special helper to create the config object
  // Will also replace common things in the src-set
  object PictureTagPreview(object tag, int size) {
    return new {
      Path,
      Result = tag.ToString()
        .Replace(">", ">\n")
        .Replace(",", ",\n")
        .Replace("' ", "' \n")
        .Replace(" alt=", "\nalt="),
     Size = size
    };
  }
}
</hide>

<trim>
  <div class="row">
    <div class="col-lg-7">
      <h2>Best practices using the Image Service</h2>
      <p>Learn about the best practices for using the image service and more. Our goals are:</p>
      <ol>
        <li>Make sure every image is perfectly sized as needed</li>
        <li>Multiple sizes are provided for various use cases</li>
        <li>Labels and configs made by the editor (for example, setting a priority corner) are respected by the resizer</li>
      </ol>
    </div>
    <div class="col-lg-5">
      @Html.Partial("../shared/_InfoSection.cshtml", new { Data = viewMd.Specs.Requirements, Title = "Requirements", Icon = "fa-exclamation-circle" })
      @Html.Partial("../shared/_InfoSection.cshtml", new { Data = viewMd.Specs.Resources, Title = "Resources" })
    </div>
  </div>
</trim>

<h2>Preparation</h2>
<p>
  All the following examples use the <a href="https://docs.2sxc.org/api/dot-net/ToSic.Sxc.Services.IImageService.html" target="_blank">Image Service</a>.
  So to make this work, something like the following code will be at the beginning of most Razor files:
</p>

<snippet id="prepare-image-service">
@using ToSic.Sxc.Services;
@{
  var imgSvc = GetService<IImageService>();
}
</snippet>
<hide-silent> @* Show only this snippet *@
@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "prepare-image-service", Size = 100 }) 
</hide-silent>

<h2>Image with URL vs. Field in <code>img</code> tag</h2>
<p>
  As learned in the previous tutorials the <code>img</code> tag can be created out of URLs.
  The image service can also be used with Fields. The field will contain the URL as well as additional Metadata like the description or what part of the picture is important (the Crop-Anchor).
</p>
<p>
  To get the most out of 2sxc and its image configuration options 
  it's best to use the image object instead of URLs. By using the image configuration options,
  the settings can be easily retrieved from the corresponding image.
</p>

<hide>
  @{
    var Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<div class="row">
  <div class="col-md">

    <p><strong>Picture from <code>Content.Image</code>:</strong></p>
    <snippet id="img-url">
      @* Picture from Content.Image *@
      @imgSvc.Img(Content.Image)
    </snippet>

  </div>
  <div class="col-md">

    <p><strong>Picture from <code>Field</code> containing crop anchor and alt text:</strong></p>
    <snippet id="img-object">
      @* Picture from Field containing crop anchor and alt text *@
      @imgSvc.Img(Content.Field("Image"))
    </snippet>

  </div>
</div>

<hide-silent> @* Show only this snippet *@

<br>
<h6>Image to the LEFT - code and generated HTML</h6>
@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-url", Size = 50 }) 
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(imgSvc.Img(Content.Image), 200))

<br>
<h6>Image to the RIGHT (note the description and anchor-parameter in the URL)</h6>
@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "img-object", Size = 50 }) 
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(imgSvc.Img(Content.Field("Image")), 200))
</hide-silent>



<h2>Picture with URL vs. Field in <code>picture</code> tag</h2>
<p>
  As learned in the previous tutorials the <code>picture</code> tag can be created out of URLs.
  The image service can also be used with Fields. The field will contain the URL as well as additional Metadata like the description or what part of the picture is important (the Crop-Anchor).
  <br><br>
  To get the most out of 2sxc and its image configuration options 
  it's best to use the image object instead of URLs. By using the image configuration options,
  the settings can be easily retrieved from the corresponding image.
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<div class="row">
  <div class="col-md">

    <p><strong>Picture from <code>Content.Image</code>:</strong></p>
    <snippet id="picture-url">
      @* Picture from Content.Image *@
      @imgSvc.Picture(Content.Image)
    </snippet>

  </div>
  <div class="col-md">

    <p><strong>Picture from <code>Field</code> containing crop anchor and alt text:</strong></p>
    <snippet id="picture-object">
      @* Picture from Field containing crop anchor and alt text *@
      @imgSvc.Picture(Content.Field("Image"))
    </snippet>

  </div>
</div>

<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "picture-url", Size = 50 }) 
<h6>This generates:</h6>
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(imgSvc.Picture(Content.Image), 300))

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "picture-object", Size = 50 }) 
<h6>This generates:</h6>
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(imgSvc.Picture(Content.Field("Image")), 300))
</hide-silent>



<br>

<h2>Choose the optimal alt text</h2>
<p>
  By passing the image object, the picture tag will apply the alt text automatically.
  <br>
  Because alt texts are not always defined in the settings, different texts can be set as fallback.2sxc
  Preferably in that case, the image alt text has priority over other texts.
  We can create a fallback by using the <code>Text.First(text1, text2)</code> Method from Razor Blade. 
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<snippet id="image-alt-text">
@{
  var fallbackAltText = "Fallback";

  var imageFieldWithAltText = Content.Field("Image"); 
  var optimalAltText = Text.First(imageFieldWithAltText.Metadata.Description, fallbackAltText);
}
<div>
  <p><strong>Image with optimal alt text (@optimalAltText):</strong></p>
  @imgSvc.Picture(imageFieldWithAltText, imgAlt: optimalAltText)
</div>
</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "image-alt-text", Size = 250 }) 

<h6>This generates:</h6>
@{ var previewTag = imgSvc.Picture(Content.Field("Image"), imgAlt: optimalAltText); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>

<hide>
  @Html.Partial("../shared/_PreCodeFooter.cshtml")

  @Html.Partial("../shared/_source-code.cshtml", new { 
    Path,
    Size = 3100
  }) 
</hide>