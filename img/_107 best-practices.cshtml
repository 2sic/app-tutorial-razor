@inherits Custom.Hybrid.Razor12
@using ToSic.Sxc.Services;
@using ToSic.Razor.Blade;
<hide>
@Html.Partial("_header.cshtml")
@{  
  /* Internal remarks for the tutorial developers
    To really see the images loading they must have different names in each tutorial.
    Otherwise some image is already loaded because of a different example, and the user won't see lazy-loading on resize.
  */
  var hlp = CreateInstance("../shared/Helpers.cs");
  var viewMd = AsDynamic((CmsContext.View.Metadata.OfType(hlp.TutViewMetadataType) as IEnumerable<dynamic>).FirstOrDefault());
}
@functions {
  // Special helper to create the config object
  // Will also replace common things in the src-set
  object PictureTagPreview(object tag, int size) {
    return new {
      Path,
      Result = tag.ToString()
        .Replace(">", ">\n")
        .Replace(",", ",\n")
        .Replace(" alt=", "\nalt="),
     Size = size
    };
  }
}
</hide>

<trim>
  <div class="row">
    <div class="col-lg-7">
      <h2>Best practices using the Image Service</h2>
      <p>Learn about the best practices for using the image service and more.</p>
    </div>
    <div class="col-lg-5">
      @Html.Partial("../shared/_InfoSection.cshtml", new { Data = viewMd.Specs.Requirements, Title = "Requirements", Icon = "fa-exclamation-circle" })
      @Html.Partial("../shared/_InfoSection.cshtml", new { Data = viewMd.Specs.Resources, Title = "Resources" })
    </div>
  </div>
</trim>


<h2>Create image tags out of URLs</h2>
<p>
  As learned in the previous tutorials the image tag can be created out of URLs.
  <br><br>
  Below you will find an example:
</p>

<snippet id="image-url">
  @{
    var imgSvc = GetService<IImageService>();
  }

  <p><strong>Picture from URL:</strong></p>
  @imgSvc.Img(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg")
</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "image-url", Size = 150 }) 

<h6>This generates:</h6>
@{ var previewTag = imgSvc.Img(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg"); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>



<h2>Create image tags out of image objects</h2>
<p>
  Image objects differ from URLS by including additional properties such as an alt text and crop anchor. 
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    var Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<snippet id="image-from-object">
@{
  imgSvc = GetService<IImageService>();
}

<p><strong>Image from <code>Content.Image</code> containing crop anchor and alt text:</strong></p>
@imgSvc.Img(Content.Field("Image"))

</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "image-from-object", Size = 170 }) 

<h6>This generates:</h6>
@{ previewTag = imgSvc.Img(Content.Field("Image")); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>




<h2>Create picture tags out of image URLs</h2>
<p>
  As learned in the previous tutorials the picture tag can be created out of URLs.
  <br><br>
  Below you will find an example:
</p>

<snippet id="picture-url">
  @{
    imgSvc = GetService<IImageService>();
  }

  <p><strong>Picture from URL:</strong></p>
  @imgSvc.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg")
</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "picture-url", Size = 150 }) 

<h6>This generates:</h6>
@{ previewTag = imgSvc.Picture(App.Path + "/img/assets/jellyfish-img-srcset-2000.jpg"); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>




<h2>Create picture tags out of image objects</h2>
<p>
  Image objects differ from URLs by including additional properties such as an alt text and image description. 
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<snippet id="picture-from-object">
@{
  imgSvc = GetService<IImageService>();
}

<p><strong>Image from <code>Content.Image</code> containing crop anchor and alt text:</strong></p>
@imgSvc.Picture(Content.Field("Image"))

</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "picture-from-object", Size = 170 }) 

<h6>This generates:</h6>
@{ previewTag = imgSvc.Picture(Content.Field("Image")); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>




<h2>Provide the image object instead of the URL</h2>
<p>
  To get the most out of 2sxc and its image configuration options 
  it's best to use the image object instead of URLs. By using the image configuration options,
  the settings can be easily retrieved from the corresponding image.
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<snippet id="image-object">
@{
  imgSvc = GetService<IImageService>();
}

<div class="row">
  <div class="col-md">

    <p><strong>Picture from <code>Content.Image</code>:</strong></p>
    @imgSvc.Picture(Content.Image)

  </div>
  <div class="col-md">

    <p><strong>Picture from <code>Field</code> containing crop anchor and alt text:</strong></p>
    @imgSvc.Picture(Content.Field("Image"))

  </div>
</div>

</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "image-object", Size = 400 }) 

<h6>This generates:</h6>
@{ previewTag = imgSvc.Picture(Content.Field("Image")); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>




<br>

<h2>Choose the optimal alt text</h2>
<p>
  By passing the image object, the picture tag will apply the alt text automatically.
  <br>
  Because alt texts are not always defined in the settings, different texts can be set as fallback.2sxc
  Preferably in that case, the image alt text has priority over other texts.
  We can create a fallback by using the <code>Text.First(text1, text2)</code> Method from Razor Blade. 
  <br><br>
  Below you will find an example:
</p>

<hide>
  @{
    Content = AsList(App.Data["ImgDemoData"]).FirstOrDefault();
  }
</hide>
<snippet id="image-alt-text">
@{
  imgSvc = GetService<IImageService>();

  var fallbackAltText = "Fallback";

  var imageFieldWithAltText = Content.Field("Image"); 
  var optimalAltText = Text.First(imageFieldWithAltText.Metadata.Description, fallbackAltText);
}
<div>
  <p><strong>Image with optimal alt text (@optimalAltText):</strong></p>
  @imgSvc.Picture(imageFieldWithAltText, imgAlt: optimalAltText)
</div>
</snippet>
<hide-silent> @* Show only this snippet *@

@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "image-alt-text", Size = 300 }) 

<h6>This generates:</h6>
@{ previewTag = imgSvc.Picture(Content.Field("Image"), imgAlt: optimalAltText); }
@Html.Partial("../shared/_result.cshtml", PictureTagPreview(previewTag, 300))
</hide-silent>

<hide>
  @Html.Partial("../shared/_PreCodeFooter.cshtml")

  @Html.Partial("../shared/_source-code.cshtml", new { 
    Path,
    Size = 1500
  }) 
</hide>