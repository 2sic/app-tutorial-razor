@using Connect.Razor.Blade;
<hide>
@RenderPage("_header.cshtml")
</hide>
<trim>
  <h2><em>RazorBlade</em> Fluent Tag API - @@Tags.Attribute <em>v1.2</em></h2>
  <div>
    Here we'll go through some more advanced examples using <code>@@Tags.Attribute(...)</code>
  </div>
</trim>

<trim>
<hr>
<h2>Creating Simple Attributes</h2>
</trim>
@{
  var titleWithIssues = "I said \"check this out!\" \n\n even 'different quotes' and line breaks work!";
  var cls = "alert alert-";
  cls += (DateTime.Now.Second % 2 == 0) ? "warning" : "primary";
}
<div @Tags.Attribute("title", titleWithIssues) 
  @Tags.Attribute("class", cls)
  @Tags.Attribute("number", 27)>
  <trim>
  This is a simple demo showing how to add the <code>title</code> and <code>class</code> attribute using code. <br>
  It switches between warning/primary depending of the second being odd or even. Refresh the page to see the difference. <br>
  If you mouse-over, you'll also see the tooltips showing stuff which would cause trouble otherwise.
  </trim>
</div>


<trim>
<hr>
<h2>Creating Attributes Containing JSON</h2>
</trim>
@{
  // this is the object we want in the data-attribute
  var myObj = new { 
    Name = "razor", 
    Description="This isn't your normal text - it has \n line breaks and apostrophes"
  };
}
<div class="alert alert-secondary" @Tags.Attribute("data-my", myObj)>
  <trim>
  This div has an attribute created using an object, because we wanted json. If you look at the source, youll find <code>@Tags.Attribute("data-my", myObj)</code>
  </trim>
</div>


<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>