@using Connect.Razor.Blade;
<hide>
@RenderPage("_header.cshtml")
</hide>
<trim>
  <h2><em>RazorBlade</em> Fluent HTML5 Tags <code>@@Tag.Div(...)</code> <em>v3.0</em></h2>
  <div>
    Let's look at some more simple scenarios using the typed HTML5 objects. They are all available under <code>Tag.*</code> - so any HTML5 tag like <code>Div</code>, <code>B</code>, <code>Table</code> etc. will work. They also return a typed object - because many HTML5 tags like <code>Img</code> have additional commands like <code>.Src(url)</code>
  </div>
</trim>

<trim>
<hr>
<h2>Simple example: <code>Tag.Div</code></h2>

</trim>
@(Tag.Div("This is the intro. ", 
    Tag.B("I hope you like it"), 
    Tag.I(" otherwise it's ok too"), 
    " ðŸ˜‰")
    .Id("wrapper")
    .Class("alert")
    .Class("alert-dark"))

<trim>
<hr>
<h2>Complex Tag contents will prefer the <code>Wrap(...)</code> and <code>Add(...)</code></h2>
<div>
  Now the real power start: using the <code>Wrap</code> method, you can add more content to your tag - and this can be both text, more <code>Tag</code> objects or even lists of <code>Tag</code> objects. Wrap always replaces the content, and you could also use <code>Add(...)</code> instead to append stuff.
</div>
</trim>
@{
  var darkBox = Tag.Div()
    .Class("alert alert-dark")
    .Wrap(
      "Did you know, that you can add text...",
      Tag.Code("and tags"),
      Tag.Div(
        "as well as more ", 
        Tag.B("tags"),
        " and strings inside it?"
      )
        .Class("alert")
        .Class("alert-danger")
    );

}
@darkBox


<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>