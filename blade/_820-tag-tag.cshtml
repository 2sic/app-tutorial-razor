@using ToSic.Razor.Blade;
<hide>
@RenderPage("_header.cshtml")
</hide>
<trim>
  <h2><em>RazorBlade</em> Fluent Tag API <code>@@Tag.Custom</code> <em>v3</em></h2>
  <div>
    Let's look at some more advanced scenarios using <code>@@Tag.Custom(...)</code>
  </div>
</trim>

<trim>
<hr>
<h2>Set Common Attributes Using 
  <code>.Id</code>,
  <code>.Class</code>,
  <code>.Style</code>,
  <code>.Title</code>
</h2>
<div>
  All html attributes can have the properties
  <code>id</code>,
  <code>class</code>,
  <code>style</code> and
  <code>title</code>. 
  So <code>Tag</code> objects have quick commands to set these. What makes it magical is that they always return the main object again, so you can chain them like <br>
  <code>@@Tag.Div().Id("wrapper").Class("alert").Class("alert-primary)</code> <br>
  <em>Note that some of these, like <code>Id</code> will replace the previous value, while others like <code>Class</code> will add new values to the attribute.</em>
</div>
</trim>
@Tag.Div().Id("wrapper").Class("alert").Class("alert-primary").Wrap("This div was coded")
@{
  // often you would rather do the chaining on multiple lines, so let's try that
  var infoBox = Tag.Custom("div")
    .Id("wrapper")
    .Class("alert")
    .Class("alert-dark")
    .Wrap("This div was coded on many lines to be more readable");
}
@infoBox

<trim>
<hr>
<h2>Creating Open/Close Tags separately</h2>
<div>
  A <code>Tag</code> object also has a <code>.TagStart</code> and <code>.TagEnd</code> property, which just contains that part of the tag, allowing you to place these tags around your work.
</div>
</trim>
@{
  var successBox = Tag.Div()
    .Class("alert alert-success");
}
@successBox.TagStart
  This tag was written using both <code>.Open</code> and <code>.Close</code> 
  because it may be easier for you that way.
@successBox.TagEnd

<trim>
<hr>
<h2>Building Tags within Tags using <code>Add(...)</code></h2>
<div>
  Now the real power start: using the <code>Add</code> method, you can add more content to your tag - and this can be both text, more <code>Tag</code> objects or even lists of <code>Tag</code> objects.
</div>
</trim>
@{
  var darkBox = Tag.Div()
    .Class("alert alert-dark")
    .Add("Did you know, that you can add text...")
    .Add(Tag.Code().Wrap("and tags"))
    .Add(Tag.Div()
      .Class("alert alert-danger")
      .Add("as well as more tags inside it?")
    );
}
@darkBox


<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>