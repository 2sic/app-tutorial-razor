@inherits Custom.Hybrid.Razor14
@using System.Linq;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;

<hide>
@{
  var hlp = CreateInstance("../shared/Helpers.cs");
}
</hide>

@{
  var persons = AsList(App.Data["Persons"]);
  var books = AsList(App.Data["Books"]);
}

@Html.Partial("_header.cshtml")

<div class="row">
  <div class="col-lg-7">
    <h2>Books.Authors.Awards, a List in a List in a List</h2>
  </div>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
</div>

<h3>Show only books of Awarded Authors #1</h3>
<p>This example first gets book, checks the authors and checks if they have awards with LINQ <code>Any()</code>. </p>
<snippet id="list-list-list">
@{
  var booksWithAwardedAuthors = books
    .Where(b => (b.Authors as Dynlist)
      // this gets all the awards and combines (flattens) the list
      .SelectMany(a => a.Awards as Dynlist) 
      .Any()
    );
}
<ol>
  @foreach(var book in booksWithAwardedAuthors) {
    var awards = (book.Authors as Dynlist).SelectMany(a => (a.Awards as Dynlist));
    <li><strong>@book.Title</strong> 
      with @string.Join(",", awards.Select(a => a.Name)) (@awards.Count() awards) 
    </li>
  }
</ol>
</snippet>
<hide-silent> @* Show only this snippet *@
@Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "list-list-list", Size = 400 }) 
</hide-silent>
<hr>


<h3>Now the list of books NOT in that list</h3>
<p>And now the opposite list, so all books which don't contain one of the books with authors. It gets the "other" books by filtering the list to exclude the ones it found first. That demonstrates how to use <code>Contains(x as object)</code>. The <code>Contains(...)</code> cannot work with <code>dynamic</code>, so we must tell it it's an object for it to work.</p>
<snippet id="opposite-list">
@{
  var otherBooks = books
    .Where(b => !(booksWithAwardedAuthors as Dynlist)
      .Contains(b as object) // note: Contains() on dynamic objects needs 2sxc 9.42+ to work
    );
      
}
<ol>
  @foreach(var book in otherBooks) {
    <li><strong>@book.Title</strong></li>
  }
</ol>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "opposite-list", Size = 300 }) 
</hide-silent>

<hr>

<h3>Now the same using GroupBy</h3>
<p>Now let's do the same, but using <code>GroupBy</code> to group by awarded authors and not-awarded authors:</p>
<snippet id="groupby-author">
@{
  var booksGroupedByAuthorAwards = books
    .GroupBy(b => ((b.Authors as Dynlist).SelectMany(a => a.Awards as Dynlist).Any()));
}
<ul>
  @foreach(var group in booksGroupedByAuthorAwards) {
    <li>
      Authors with Awards: @group.Key
      <ul>
        @foreach(var book in group) {
          <li>
            @book.Title
          </li>
        }
      </ul>
    </li>
  }
</ul>
</snippet>
<hide-silent> @* Show only this snippet *@
  @Html.Partial("../shared/_source-code.cshtml", new { Path, Snippet = "groupby-author", Size = 400 }) 
</hide-silent>

<hide>
@Html.Partial("../shared/_PreCodeFooter.cshtml")
@Html.Partial("../shared/_source-code.cshtml", new { Path, Size = 1600 }) 
</hide>