@using System.Linq;
@using ToSic.SexyContent;
@* This is a short-notation we use a lot, so it's declared here *@
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;

@{
  // get data from the app directly - like reading a table
  // also convert to dynamic, to access properties like person.Name
  var persons = AsDynamic(App.Data["Persons"]);
  var books = AsDynamic(App.Data["Books"]);
}

@RenderPage("_header.cshtml")


<hr>
<h2>Accessing Books.Authors.Awards, a List in a List in a List</h2>

<h3>Show only books of Awarded Authors #1</h3>
<p>This example first gets book, checks the authors and checks if they have awards with LINQ <code>Any()</code>. </p>
@{
  var booksWithAwardedAuthors = books
    .Where(b => (b.Authors as Dynlist)
    .SelectMany(a => a.Awards as Dynlist) // this gets all the awards and "flattens" the list
    .Any());
}
<ol>
  @foreach(var book in booksWithAwardedAuthors) {
    var awards = (book.Authors as Dynlist).SelectMany(a => (a.Awards as Dynlist));
    <li><strong>@book.Title</strong> 
      with @string.Join(",", awards.Select(a => a.Name)) (@awards.Count() awards) 
    </li>
  }
</ol>
<p>And now the opposite list, so all books which don't contain one of the books with authors. It gets the "other" books by filtering the list to exclude the ones it found first. That demonstrates how to use <code>Contains(x as object)</code>. The <code>Contains(...)</code> cannot work with <code>dynamic</code>, so we must tell it it's an object for it to work.</p>
@{
  var otherBooks = books
    .Where(b => !(booksWithAwardedAuthors as Dynlist)
    .Contains(b as object));              // important: Contains only works correctly on dynamics in 2sxc 9.42+
}
<ol>
  @foreach(var book in otherBooks) {
    <li><strong>@book.Title</strong></li>
  }
</ol>
<p>Now let's do the same, but using <code>GroupBy</code> to group by awarded authors and not-awarded authors:</p>
@{
  var booksGroupedByAuthorAwards = books
    .GroupBy(b => ((b.Authors as Dynlist).SelectMany(a => a.Awards as Dynlist).Any()));
}
<ul>
  @foreach(var group in booksGroupedByAuthorAwards) {
    <li>Authors with Awards: @group.Key</li>
  }
</ul>