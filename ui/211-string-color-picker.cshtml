@inherits Custom.Hybrid.Razor14
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("/shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys })
  @{ dynamic snip = null; }
  @{ Sys.ToolbarHelpers.EnableEditForAll();  /* IMPORTANT: This must be at the top of the file */ }
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>2sxc Custom Color-Picker Input Field</h2>
    <p>
      2sxc 11 makes it very easy to create custom input fields using standard <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank">WebComponents</a>. 
      This example shows a color picker using <a href="https://simonwep.github.io/pickr/" target="_blank">Pickr</a>, a cool JS library. 
    </p>
    <p>You can learn how to:</p>
    <ul>
      <li>Use <code>connector.loadScript(...)</code> to load a js library</li>
      <li>Use <code>connector.data</code> to get the <code>value</code> and update it</li>
      <li>How to only update the data if you really change it (so users can cancel the dialog without being asked)</li>
      <li>How to save <code>null</code> to explicitly not save or reset a value</li>
      <li>Use <code>disconnectedCallback()</code> to destroy inner objects</li>
    </ul>
  </div>
</div>
@Html.Partial("../shared/WarnAnonymousIfFeatureIsOff.cshtml")
</hide>
  <h2>String Color-Picker Custom Input Field</h2>

  @((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "file:../system/field-string-app-color-pickr/index.js")).SnipStart())
    <p>
      This example shows a real string-field uses Pickr to provide a color picker. <br>
      Hit this edit button to have a look:
    </p>
    @Kit.Toolbar.Empty().New("UiStringColorPickr").AsTag()
  @snip.SnipEnd()


@Html.Partial("warning.cshtml")
@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })