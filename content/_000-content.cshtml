<hide>
@RenderPage("_header.cshtml")
</hide>
@using ToSic.Razor.Blade;
@using System.Linq;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;

<h2>Working with Content</h2>
<trim>
  <p>
    In most cases a template will run in a context - so something prepared data for the template, which should now be visualized. These examples assume you're working with 2sxc, which let's editors work with content - and your template only needs to visualize it. The current content item (if it's just one) is always available on the variable called <code>Content</code>. It's a <code>dynamic</code> object, so you can just type things like <code>@@Content.FirstName</code> to access the properties. 
  </p>
</trim>


<hr>
<h3>Show Content of the Current template</h3>
<img src="@Content.Mugshot?w=100&h=100&mode=crop" align="right"  style="border-radius: 50%">
<ul>
  <li>Name: @Content.FirstName @Content.LastName</li>
  <li>Birthday: @Content.Birthday.ToString("d")</li>
</ul>

<trim>
<hr>
<h3>Show all Items assigned to current template</h3>
  <p>
    If a view has many items assigned (called a list) these should be retrieved from <code>Data["Default"]</code>. You will usually want to convert it to a dynamic list using <code>AsDynamic(...)</code>. This example also uses <code>Text.Has(...)</code> to only show a picture if it really has a mugshot. 
  </p>
</trim>
<ul>
@foreach(var person in AsDynamic(Data["Default"])) {
  <li>
    @if(Text.Has(person.Mugshot)) {
      <img src="@person.Mugshot?w=50&h=50&mode=crop" width="50px" style="border-radius: 50%">
    }
    @person.FirstName @person.LastName
  </li>
}
</ul>

<trim>
<hr>
<h3>Show sub-items of current items</h3>

  <p>
    This example builds on the last one, and additionally shows awards these authors have won, which is on the <code>Awards</code> property.
  </p>
</trim>

<ul>
@foreach(var person in AsDynamic(Data["Default"])) {
  <li>
    @if(Text.Has(person.Mugshot)) {
      <img src="@person.Mugshot?w=50&h=50&mode=crop" width="50px" style="border-radius: 50%">
    }
    @person.FirstName @person.LastName
    @if(person.Awards.Count > 0 ) {
      // we just want the award names - to understand this, look at the LINQ tutorial
      var awardNames = (person.Awards as Dynlist).Select(a => a.Name);
      <span>
        (awards: @string.Join(",", awardNames))
      </span>
      

    }
  </li>
}
</ul>

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>