@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
@using System.Linq;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys })
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Working with Content</h2>
    <p>In most cases a template will run in a context - so something prepared data for the template, which should now be visualized. These examples assume you're working with 2sxc, which let's editors work with content - and your template only needs to visualize it. The current content item (if it's just one) is always available on the variable called <code>Content</code>. It's a <code>dynamic</code> object, so you can just type things like <code>@@Content.FirstName</code> to access the properties.</p>
  </div>
</div>


<h3>Show Content of the Current template</h3>

@Sys.SourceCode.SnippetInlineStart("content-values")
  <img loading="lazy" src="@Content.Mugshot?w=100&h=100&mode=crop" class="rounded-circle">
  <ul>
    <li>Name: @Content.FirstName @Content.LastName</li>
    <li>Birthday: @Content.Birthday.ToString("d")</li>
    <li>Award: @Content.Awards.Name</li>
  </ul>
@Sys.SourceCode.SnippetInlineEnd()


<trim>
<p>In this example, the Content-Item is of the type <code>Person</code>. It has properties like <code>Name, Birthday</code> etc. and a property called <code>Awards</code>. <code>Awards</code> refers to other items of the type <code>PersonAwards</code> and has properties like <code>Name</code>. The above example showed the award Name using <code>@@Content.Awards.Name</code> - which makes sense when you only expect one award. Below we'll show some ways to show many items, if there are more than one.  
</trim>

<trim>

<h3>Show all Items assigned to current template</h3>
  <p>
    If a view has many items assigned (called a list) these should be retrieved from <code>Data</code> - if you don't specify a stream, it's treated as <code>Data["Default"]</code>. You will usually want to convert it to a dynamic list using <code>AsList(...)</code>. This example also uses <code>Text.Has(...)</code> to only show a picture if it really has a mugshot. 
  </p>
</trim>

@Sys.SourceCode.SnippetInlineStart("content-assigned-items")
  <ul>
  @foreach (var person in AsList(Data)) {
    <li>
      @if (Text.Has(person.Mugshot)) {
        <img loading="lazy" src="@person.Mugshot?w=50&h=50&mode=crop" width="50px" class="rounded-circle">
      }
      @person.FirstName @person.LastName
    </li>
  }
  </ul>
@Sys.SourceCode.SnippetInlineEnd()


<trim>
<h3>Show sub-items of current items</h3>

  <p>
    This example builds on the last one, and additionally shows awards these authors have won, which is on the <code>Awards</code> property.
  </p>
</trim>

@Sys.SourceCode.SnippetInlineStart("content-sub-items")
  <ul>
  @foreach (var person in AsList(Data)) {
    <li>
      @if (Text.Has(person.Mugshot)) {
        <img loading="lazy" src="@person.Mugshot?w=50&h=50&mode=crop" width="50px" style="border-radius: 50%">
      }
      @person.FirstName @person.LastName
      @if (person.Awards.Count > 0 ) {
        // we just want the award names - to understand this, look at the LINQ tutorial
        var awardNames = AsList(person.Awards as object).Select(a => a.Name);
        <span>
          (awards: @string.Join(",", awardNames))
        </span>
      }
    </li>
  }
  </ul>
@Sys.SourceCode.SnippetInlineEnd()


@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })