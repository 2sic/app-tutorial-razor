@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
@using System.Linq;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys }) 
</hide>


<h2>Data Sources Tutorial</h2>
<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <p>
      <strong>DataSources</strong> are the magic backbone of 2sxc.
      They can get data, filter it, sort it, and more.
      In many cases you will simply use the DataSources provided by 2sxc and the EAV system, but you can do even more.
      Specifically:
    </p>

    <ul>
      <li>
        You can use the IDataService with <code>Kit.Data</code> in your C# code to get DataSource Objects. 
        A common scenario is when you need to configure the parameters in ways that are not possible in the UI.
      </li>
      <li>
        You can create your own <strong>Dynamic DataSources</strong> in C# and use them in your code and in Visual Query.
        This is a bit more advanced, but very powerful.
        Common scenarios are DataSources which do things or retrieve data which the built-in DataSources don't do.
      </li>
      <li>
        You can create <strong>compiled DataSources</strong> in C# and use them in your code and in Visual Query.
        This is much more advanced, and not demonstrated in these tutorials, 
        since it would be hard to install them.
      </li>
    </ul>
  </div>
</div>

@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })