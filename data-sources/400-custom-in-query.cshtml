@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
@using System.Linq;
@using ToSic.Eav.DataSources;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys }) 
</hide>


<h2>Custom Dynamic DataSources - Use in Visual Query</h2>
<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <p>
      Dynamic DataSources can also be used in Queries.
      The following examples show how to use them.
    </p>

  <div class="row">
    <div class="col-4">@Sys.Fancybox.PreviewWithLightbox(App.Path + "/data-sources/assets/app-data-sources.jpg", 200, 100, "float-left", label: "Dynamic DataSources in Visual Query")</div>
  </div>

  </div>
</div>

<trim>
  <h2>Query using Authors and KeepOdd</h2>
  <p>
    The following query will simply combine the two DataSources.
    The first will provide the authors.
    The second will apply the KeepOdd filters.
  </p>
</trim>
@Sys.SourceCode.ResultStart("custom-101", "Authors.cs", "KeepOdd.cs")
  <div class="row">
    <div class="col-4">@Sys.Fancybox.PreviewWithLightbox(App.Path + "/data-sources/assets/use-in-visual-query.jpg", 200, 100, "float-right float-end", label: "Simple Query", figure: false)</div>
  </div>
  @{
    var queryOddAuthors = App.Query["DynamicDataSourceKeepOdd"];
  }
  <h3>Data in the Query (@queryOddAuthors.List.Count())</h3>
  <ul>
    @foreach (var item in AsList(queryOddAuthors)) {
      <li>
        <strong>@item.EntityTitle</strong> (ID: @item.EntityId)
      </li>
    }
  </ul>
@Sys.SourceCode.ResultEnd("file:../DataSources/Authors.cs", "file:../DataSources/KeepOdd.cs")


<trim>
  <h2>Query with Configuration</h2>
  <p>
    DataSources which have <code>[Configuration]</code> attributes can also support full visual configuration.
    The system looks for a content type with the same name as the DataSource + <em>Configuration</em>.
    In this case, it's looking for a Content Type <code>WithConfigConfiguration</code>.
  </p>
</trim>
@Sys.SourceCode.ResultStart("withConfig", "WithConfig.cs")
  <div class="row">
    <div class="col-4">@Sys.Fancybox.PreviewWithLightbox(App.Path + "/data-sources/assets/configure-in-visual-query1.jpg", 200, 100, "float-left", label: "Configured Query", figure: false)</div>
    <div class="col-4">@Sys.Fancybox.PreviewWithLightbox(App.Path + "/data-sources/assets/configure-in-visual-query2.jpg", 200, 100, "float-left", label: "Edit Configuration", figure: false)</div>
  </div>
  @{
    var queryWithConfig = App.Query["DynamicDataSourceWithConfig"];
  }
  <h3>Data in the Query (@queryWithConfig.List.Count())</h3>
  <ul>
    @foreach (var item in AsList(queryWithConfig)) {
      <li>
        <strong>@item.Title</strong> - Favorite Color: @item.FavoriteColor
      </li>
    }
  </ul>
@Sys.SourceCode.ResultEnd("file:../DataSources/WithConfig.cs")


<trim>
  <h2>Visual Query Customizations</h2>
  <p>
    Many aspects such as the <em>Icon</em>, <em>Name</em> etc. have automatic defaults.
    But you can configure them as you need using the <code>[VisualQuery]</code> attribute.
  </p>

</trim>
@Sys.SourceCode.ResultStart("customized", "VisualQueryCustomized.cs")
  <div class="row">
    <div class="col-4">@Sys.Fancybox.PreviewWithLightbox(App.Path + "/data-sources/assets/visual-query-attribute.jpg", 200, 200, "float-left", label: "Customized with VisualQuery Attribute", figure: false)</div>
  </div>
@Sys.SourceCode.ResultEnd("file:../DataSources/VisualQueryCustomized.cs")

@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })
