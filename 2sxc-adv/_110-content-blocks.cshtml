@inherits ToSic.Sxc.Dnn.RazorComponent
@using System.Collections;
@using System.Linq;
@using DotNetNuke.Entities.Modules;
<hide>
@RenderPage("_header.cshtml")
</hide>

<trim>
<h2>Query Content-Blocks</h2>
<p>
  In this example, we'll see what content-blocks are in the system, and where they are in use. 
</p>
<p>
  You are on portal <strong>@Dnn.Portal.PortalId</strong> - this sample has hard-wired IDs for portal 59 (our dev-environment) and 24 (the tutorials on 2sxc.org). If one of these is detected, it will show the stats for a portal we know on that system, otherwise from the current app - which won't show much, since this tutorial app doesn't have many content-blocks. 
</p>

</trim>
@{
  // CONSTANTS
  // this key is used in module settings
  const string SettingsCG = "ToSIC_SexyContent_ContentGroupGuid";

  // isDev should just tell us, if we're looking at the dev-portal (while creating this demo app) or if it's running on 2sxc.org
  // where we use other zoneId and appId;
  var isDev = Dnn.Portal.PortalId == 59;
  var is2sxcTutorial = Dnn.Portal.PortalId == 24;
  var portalId = isDev ? 10 : is2sxcTutorial ? 0 : Dnn.Portal.PortalId;

  // create array with all 2sxc modules in this portal
  var mc = ModuleController.Instance;
  var dnnMod2sxcContent = mc.GetModulesByDefinition(portalId, "2Sexy Content");
  var dnnMod2sxcApp = mc.GetModulesByDefinition(portalId, "2Sexy Content App");
  var mergedMods = new ModuleInfo[dnnMod2sxcContent.Count + dnnMod2sxcApp.Count];
  dnnMod2sxcContent.CopyTo(mergedMods);
  dnnMod2sxcApp.CopyTo(mergedMods, dnnMod2sxcContent.Count);
  var allMods = mergedMods
    .Where(m => m.DefaultLanguageModule == null)
    .Where(m => !m.IsDeleted)
    .Where(m => m.ModuleSettings.ContainsKey(SettingsCG));

  // Get the app & views we're going to investiage the views of
  var app = isDev 
    ? ToSic.Sxc.Dnn.Factory.App(11, 35) // some app on our dev environment
    : is2sxcTutorial
      ? ToSic.Sxc.Dnn.Factory.App(2, 2) // the 2sxc.org Content-App
      : App; // fallback, use this app, but not very exciting
  var views = AsList(app.Data["2SexyContent-Template"]).OrderBy(t => t.Name);

  // get all content blocks which have templates - skip the ones without, as they have not been initialized yet
  var contentBlocks = AsList(app.Data["2SexyContent-ContentGroup"]);

  var block2ModuleMap = contentBlocks.GroupJoin(allMods, 
    cb => cb.EntityGuid,
    m => TryParseGuid(m.ModuleSettings[SettingsCG]),
    (cb, m) => new { 
      Block = cb, 
      Modules = m 
    }
  );

  var view2BlockModuleMap = block2ModuleMap.GroupBy(b2m => {
    var templates = AsList(b2m.Block.Template as object);
    return templates.Any() ? templates.First().EntityGuid : null;
  });

  // group the blocks by template - make sure that blocks without templates are grouped into null
  var cbByViews = contentBlocks.GroupBy(cb => {
    var templates = AsList(cb.Template as object);
    return templates.Any() ? templates.First().EntityGuid : null;
  });


  var blocksWithModules = cbByViews.GroupJoin(allMods, 
    cb => cb.Key,
    m => TryParseGuid(m.ModuleSettings[SettingsCG]),
    (cb, m) => new { Block = cb, Modules = m }
  );

  var viewsWithBlocks = views.GroupJoin(view2BlockModuleMap,
    v => v.EntityGuid,
    bwm => bwm.Key,
    (v, bwm) => {
      var blockWithMod = bwm.SingleOrDefault();
      return new { 
        View = v, 
        Blocks = blockWithMod,
        ModsCount = blockWithMod != null ? blockWithMod.SelectMany(bmlist => bmlist.Modules).Count() : 0,
      };
    }
  );
}

<div>
  <h3>Statistics</h3>
  <ol>
    <li>We're looking at portal @portalId, Zone @app.ZoneId, App: @app.AppId </li>
    <li>@views.Count() Views</li>
    <li>@contentBlocks.Count() Content Blocks </li>
    <li>@allMods.Count() DNN Modules in the primary language </li>
  </ol>
</div>
<h3>Views</h3>

<ol>
@foreach(var set in viewsWithBlocks) {
  <li>
    View <strong>@set.View.Name</strong>

    @set.Blocks.Count() / @set.ModsCount
    @if(set.Blocks != null) {
       <text>has @set.Blocks.Count() content-blocks in @set.ModsCount modules </text>
       <ol>
        @foreach(var blockSet in set.Blocks) {
          <li>
            Block: @blockSet.Block.EntityGuid (@blockSet.Block.EntityId) 
            in @blockSet.Modules.Count() modules: @string.Join(",", blockSet.Modules.Select(m => m.ModuleID))
          </li>
        }
       </ol>
    } else {
      <text>not in use</text>
    }

  </li>
}
</ol>

<h3>Content Blocks with Modules</h3>
<ol>
  @foreach(var cbSet in block2ModuleMap) {
    <li>
      @cbSet.Block.Key / @cbSet.Modules.Count()
      <ol>
        @foreach(var mod in cbSet.Modules) {
          <li>@mod.ModuleID on tab @mod.TabID</li>
        }
      </ol>
    </li>
  }
</ol>

<h3>Modules</h3>
<ol>
  @foreach(var m in allMods) {

    <li>@m.ModuleID / @m.PortalID - modDef: @m.ModuleDefID - settings = @ShowSettings(m.ModuleSettings)</li>
  }
</ol>

@helper ShowSettings(Hashtable settings) {

  foreach(var k in settings.Keys) {
    <span>
    @k = @settings[k],
    </span>
  }
}

@functions {
  Guid TryParseGuid(object original) {
    try {
        // var setGuid = m.ModuleSettings[SettingsCG];
        return Guid.Parse(original.ToString());
      }
      catch {
        return Guid.Empty;
      }
  }
}

<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>