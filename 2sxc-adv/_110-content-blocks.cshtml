@inherits ToSic.Sxc.Dnn.RazorComponent
@using System.Linq;
@using DotNetNuke.Entities.Modules;
<hide>
@RenderPage("_header.cshtml")
</hide>

<trim>
<h2>Query Content-Blocks</h2>
<p>
  In this example, we'll see what content-blocks are in the system, and where they are in use. 
</p>
<p>
  You are on portal <strong>@Dnn.Portal.PortalId</strong> - this sample has hard-wired IDs for portal 59 (our dev-environment) and 24 (the tutorials on 2sxc.org). If one of these is detected, it will show the stats for a portal we know on that system, otherwise from the current app - which won't show much, since this tutorial app doesn't have many content-blocks. 
</p>

</trim>
@{
  // isDev should just tell us, if we're looking at the dev-portal (while creating this demo app) or if it's running on 2sxc.org
  // where we use other zoneId and appId;
  var isDev = Dnn.Portal.PortalId == 59;
  var is2sxcTutorial = Dnn.Portal.PortalId == 24;
  var portalId = isDev ? 10 : is2sxcTutorial ? 0 : Dnn.Portal.PortalId;
  var app = isDev 
    ? ToSic.Sxc.Dnn.Factory.App(11, 35) // some app on our dev environment
    : is2sxcTutorial
      ? ToSic.Sxc.Dnn.Factory.App(2, 2) // the 2sxc.org Content-App
      : App; // fallback, use this app, but not very exciting
  var views = AsList(app.Data["2SexyContent-Template"]).OrderBy(t => t.Name);

  // get all content blocks which have templates - skip the ones without, as they have not been initialized yet
  var contentBlocks = AsList(app.Data["2SexyContent-ContentGroup"]);

  // group the blocks by template - make sure that blocks without templates are grouped into null
  var cbGroups = contentBlocks.GroupBy(cb => {
    var templates = AsList(cb.Template as object);
    return templates.Any() ? templates.First().EntityId : null;
  });

  // create array with all 2sxc modules
  var mc = ModuleController.Instance;
  var dnnMod2sxcContent = mc.GetModulesByDefinition(portalId, "2Sexy Content").ModuleDefID;
  var dnnMod2sxcApp = mc.GetModulesByDefinition(portalId, "2Sexy Content App").ModuleDefID;
  var dnnModsC = mc.GetAllTabsModulesByModuleID(dnnMod2sxcContent);
  var dnnModsA = mc.GetAllTabsModulesByModuleID(dnnMod2sxcApp);
  var allMods = new ModuleInfo[dnnModsC.Count + dnnModsA.Count];
  dnnModsC.CopyTo(allMods);// .ToList();// as IEnumerable<object>).Select(x => x);
  dnnModsA.CopyTo(allMods, dnnModsC.Count);

  var modules = mc.GetAllTabsModules(portalId, false);

  var viewsWithBlocks = views.Join(cbGroups, 
    v => v.EntityId,
    cb => cb.Key,
    (v, cb) => new { View = v, Blocks = cb}
  );
}

<div>
  <h3>Statistics</h3>
  <ol>
    <li>We're looking at portal @portalId, Zone @app.ZoneId, App: @app.AppId. Module Def for Content is @dnnMod2sxcContent (@dnnModsC.Count), App is @dnnMod2sxcApp (@dnnModsA.Count)</li>
    <li>@views.Count() Views</li>
    <li>@contentBlocks.Count() Content Blocks </li>
    <li>@modules.Count DNN Modules </li>
  </ol>
</div>
<h3>Views</h3>
<ol>
@foreach(var set in viewsWithBlocks) {
  <li>
    View <strong>@set.View.Name</strong>
    @if(set.Blocks.Any()) {
      <text>has @set.Blocks.Count() content-blocks</text>
    } else {
      <text>not in use</text>
    }

  </li>
}
</ol>

<h3>Modules</h3>
<ol>
  @foreach(var m in allMods) {
    <li>@m.ModuleID</li>
  }
</ol>


<hide>
@RenderPage("../shared/_source-code.cshtml", new { Path = VirtualPath }) 
</hide>