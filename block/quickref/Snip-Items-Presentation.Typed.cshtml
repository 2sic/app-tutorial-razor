@inherits Custom.Hybrid.RazorTyped
@{/*! Tut.Tabs=ViewConfig */
  // Patch so the tutorial works reliably even if the main module had data added which are not a person
  // So we're simulating that `MyData` is the assigned query for this view
  var tutCode = MyModel.Code("Tutorial");
  var itemEntities = tutCode.SimulateViewList(query: "QuickRef-Content-Simulation");
  var MyItems = AsItems(itemEntities as object);
  var prepPres = AsItems(tutCode.SimulateViewPresList(itemEntities, padWithNull: false, query: "QuickRef-Content-Simulation", stream: "Presentation") as object);
  var presCount = 0;
/*!*/}
<ul>
  @foreach (var item in MyItems) {
    var pres = item.Presentation;
    <hide-silent>
    @{
      /* Silent patching for tutorial only, as it's not a standalone view */ 
      pres = prepPres.Skip(presCount++).First();
    }
    </hide-silent>
    var hType = pres.String("HeadingType");
    var title = item.Title + (pres.Bool("Highlight") ? " ðŸŒŸ" : "");
    <li>
      @* Create a heading tag the size specified in Presentation *@
      @if (pres.IsNotEmpty("HeadingType")) {
        @Kit.HtmlTags.Custom(hType).Wrap(title)
      } else {
        @title
      }
      <br>
      <em>FYI: Heading @(pres.IsEmpty("HeadingType") ? "none" : pres.String("HeadingType"))</em>
      <div style='color: @pres.Attribute("Color")'>
        @item.Html("Contents")
      </div>
    </li>
  }
</ul>
