@inherits Custom.Hybrid.RazorPro
@using ToSic.Razor.Blade;
@using System.Linq;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("../shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys })
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Quick Reference for <em>Pro/Typed Razor Code</em></h2>
    <p>
      This is a quick CheatSheet to provide you with a reference to most APIs you'll use.
    </p>
    <p>
      This uses a base class of <code>@@inherits Custom.Hybrid.Razor14</code> and would also apply to <code>...Razor12</code>. 
      Most samples do not work for the new <code>@@inherits Custom.Hybrid.Razorpro</code> as that provides different objects and methods.  that uses a different syntax. 
    </p>
  </div>
</div>

<hr>
<h2>Basic Razor Syntax</h2>
<p>
  These are some very common Razor APIs which you should know.
</p>

@* Shared section, which is identical in both Razors syntaxes *@
@Html.Partial("./shared-razor-variables.cshtml")
@Html.Partial("./shared-razor-conditions.cshtml")
@Html.Partial("./shared-razor-loops.cshtml")
@Html.Partial("./shared-razor-html.cshtml")

<hr>
<h2>Advanced Razor Syntax</h2>
<p>
  These are some more advanced APIs which are very common as well, so you should be familiar with them.
</p>

@Html.Partial("./shared-razor-functions.cshtml")



<h3>Reuse Partial Razor and functions from Helper Code files</h3>
@Sys.SourceCode.ResultRefStart("reuse-external" @*, "Source of line.cshtml" *@)
  @{
    // helper library to say hello & create QR codes
    var qrLib = GetCode("../reuse/SharedFunctions.cs");
  }
  <h4>Call some external Razor files</h4>
  <ol>
    <li>@Html.Partial("../reuse/line.cshtml")</li>
    <li>@Html.Partial("../reuse/line.cshtml")</li>
    <li>@Html.Partial("../reuse/box.cshtml", new { Label = "Hello, this is the first line" })</li>
    <li>@Html.Partial("../reuse/box.cshtml", new { Label = "Second line!", Color = "red" })</li>
    <li>Hello from shared lib: @qrLib.SayHello()</li>
    <li>
      QR Code from shared lib
      <img loading="lazy" src='@qrLib.QrPath("https://2sxc.org")' width="75px">
    </li>
  </ol>
@Sys.SourceCode.ResultRefEnd(new string[] { "reuse210", "reuse310", "reuse320" }) @*, "file:../reuse/line.cshtml") *@



<hr>
<h2>Work with current Content, Images, Multi-Language</h2>
<p>
  Every view/template receives prepared data, either entered by the user on this page, or provided throug a query.
</p>

@{
  // Quick workaround, so the tutorial works reliably even if the main module had data added
  var MyItem = AsItem(MyData);
}

<h3>Work with Current Item (MyItem)</h3>
@Sys.SourceCode.ResultRefStart("content")
  <h4>Douglas Adams, the current item (MyItem)</h4>
  <img loading="lazy" src='@MyItem.Url("Mugshot")?w=100&h=100&mode=crop' class="rounded-circle">
  <ol>
    <li>MyItem Name: @MyItem.String("FirstName") @MyItem.String("LastName")</li>
    <li>MyItem Birthday: @MyItem.DateTime("Birthday").ToString("d")</li>
    <li>MyItem Award: @MyItem.Child("Awards").String("Name")</li>
  </ol>
  <h4>Loop the persons in the Query for this view</h4>
  <ul>
    @foreach (var person in AsItems(MyData)) {
      <li>
        @if (Text.Has(person.Url("Mugshot"))) {
          <img loading="lazy" src='@person.Url("Mugshot")?w=50&h=50&mode=crop' width="50px" class="rounded-circle">
        }
        @person.String("FirstName") @person.String("LastName")
      </li>
    }
  </ul>
@Sys.SourceCode.ResultRefEnd(new string[] { "entity", "content" })

@{
  return;
}


<hr>
<h2>2sxc Razor APIs to work with Page and Links</h2>

<h3>Page URL Parameters / QueryString</h3>
@Sys.SourceCode.ResultRefStart("url-parameters")
  <ol>
    <li>
      <a href='@Link.To(parameters: "demo=true")'>Link to this page with demo=true</a>
      <br>
      <em>Note: you will then not be on this page any more, since other parameters are removed.</em>
    </li>
    <li>
      The current Page parameter for <code>ref100</code> (used in the URL):
      @MyPage.Parameters["ref100"]
    </li>
    <li>
      The current page parameters - used to create a new link: @MyPage.Parameters
    </li>
    <li>
      <a href='@Link.To(parameters: MyPage.Parameters)'>Link to current page with same parameters</a>
    </li>
    <li>
      <a href='@Link.To(parameters: MyPage.Parameters.Set("demo", true))'>Link to current page with demo=true</a>
    </li>
  </ol>
@Sys.SourceCode.ResultRefEnd(new string[] { "basics310", "basics311", "basics320", "basics330", "basics410" })



<h3>Set Page Title, Keywords etc.</h3>
@Sys.SourceCode.ResultRefStart("set-page-properties")
  @* Example with a single-liner directly in the code *@
  @Kit.Page.SetTitle("Reference CheatSheet for Razor in 2sxc")
  @Kit.Page.AddIconSet(App.Path + "/blade/assets/razor-blade-icon.png")
  @Kit.Page.AddMeta("tutorial", "some value")

  @{
    // Example showing how to use in a block of code
    Kit.Page.SetDescription("Learn to use Razor Blade ");
    Kit.Page.SetKeywords("Tutorial, Razor, Blade");
  }

  @* Create a JSON-LD using an object - replicating googles example https://developers.google.com/search/docs/guides/intro-structured-data *@
  @Kit.Page.AddJsonLd(new Dictionary<string, object> {
      { "@context", "https://schema.org"},
      { "@type", "Organization"},
      { "url", "http://www.example.com"},
      { "name", "Unlimited Ball Bearings Corp."},
      { "contactPoint", new Dictionary<string, object> {
        {"@type", "ContactPoint"},
        {"telephone", "+1-401-555-1212"},
        {"contactType", "Customer service"}
      }}
  })

  @* Set some OpenGraph headers *@
  @Kit.Page.AddOpenGraph("title", "Demo of OpenGraph headers")
  @Kit.Page.AddOpenGraph("type", "website")
  <p>
    This uses <code>Kit.Page.SetTitle(...)</code> and other methods to modify the HTML sent to the browser. 
    It sets various aspecs such as <code>title</code> or FavIcons.
  </p>
  <ol>
    <li><code>meta title</code>, <code>meta description</code>, <code>meta keywords</code> </li>
    <li>favicon</li>
    <li>some JsonLd for google</li>
    <li>OpenGraph headers for FaceBook, Twitter, etc.</li>
  </ol>
@Sys.SourceCode.ResultRefEnd(new string[] { "page101", "page111", "page121", "page201", "page302", "page303" })



<h3>Get Info about Platform, Culture/Languages etc.</h3>
@Sys.SourceCode.ResultRefStart("cms-context")
  <ol>
    <li>Platform name: '<code>@MyContext.Platform.Name</code>'</li>
    <li>Platform type: '<code>@MyContext.Platform.Type</code>'</li>
    <li>Platform version: '<code>@MyContext.Platform.Version</code>'</li>

    <li>Culture Current Code: '<code>@MyContext.Culture.CurrentCode</code>'</li>
    <li>Culture Default Code: '<code>@MyContext.Culture.DefaultCode</code>'</li>

    <li>Site Id: '<code>@MyContext.Site.Id</code>'</li>
    <li>Site Url: '<code>@MyContext.Site.Url</code>'</li>
    <li>Site UrlRoot: '<code>@MyContext.Site.UrlRoot</code>'</li>

    <li>Page Id: '<code>@MyPage.Id</code>'</li>
    <li>Page Url: '<code>@MyPage.Url</code>'</li>
    <li>Page Url Parameters: '<code>@MyPage.Parameters</code>'</li>

    <li>Module Id: '<code>@MyContext.Module.Id</code>'</li>

    <li>User Id: '<code>@MyUser.Id</code>'</li>
    <li>User Name: '<code>@MyUser.Name</code>'</li>
    <li>User IsContentAdmin: '<code>@MyUser.IsContentAdmin</code>'</li>
    <li>User IsSiteAdmin: '<code>@MyUser.IsSiteAdmin</code>'</li>
    <li>User IsSystemAdmin: '<code>@MyUser.IsSystemAdmin</code>'</li>

    <li>View Id: '<code>@MyView.Id</code>'</li>
    <li>View Identifier: '<code>@MyView.Identifier</code>' (blank if no special identifier) </li>
    <li>View Name: '<code>@MyView.Name</code>'</li>
    <li>View Edition: '<code>@MyView.Edition</code>' (blank if no special CSS Framework edition) </li>
  </ol>
@Sys.SourceCode.ResultRefEnd(new string[] { "c110", "c120", "c130", "c140", "c150", "c160", "c170" })


@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })