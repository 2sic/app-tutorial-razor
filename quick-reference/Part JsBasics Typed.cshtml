@inherits Custom.Hybrid.RazorTyped
@{
  // Sys helps generate code snippets etc.
  var Sys = GetCode("../shared/Helpers.cs").Init(this);
  // The accordion is an external helper file, so we must treat it as dynamic
  var acc = MyModel.Get("Accordion") as dynamic;
  // variable to hold each section config
  dynamic accSection;
  dynamic qref;
}

@* Load JS *@
@((accSection = acc.Section("quickref-js-load")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: new Dictionary<string, string> {
    { "Source JS1", "file:js/report-loaded-in-console-path-app.js" },
    { "Source JS2", "file:js/report-loaded-in-console-path-view.js" },
  })).SnipStart())
    <p>
      Load a JavaScript relative to the App folder (see message/console): <br>
      <strong id="loadjs-app-message"></strong>
    </p>
    <script src="@App.Folder.Url/quick-reference/js/report-loaded-in-console-path-app.js"></script>

    <p>
      Load a JavaScript relative to the folder of this Razor file (see message/console): <br>
      <strong id="loadjs-view-message"></strong>
    </p>
    <script src="@MyView.Folder.Url/js/report-loaded-in-console-path-view.js"></script>
  @qref.SnipEnd()
@accSection.End()



@* turnOn *@
@((accSection = acc.Section("quickref-js-turnon")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: new Dictionary<string, string> {
    { "Source JS", "file:js/turnOn1.js" },
  })).SnipStart())
    <p>
      The following text will be replaced once the JS is triggered: <br>
      <strong id="turnOn1-message"></strong>
    </p>

    @* Load the JavaScript - it will not run by itself, as the DOM might not be ready
        Note that this can be before or after the TurnOn *@
    <script src="@MyView.Folder.Url/js/turnOn1.js"></script>

    @* Tell TurnOn to trigger the JS when everything is ready *@
    @Kit.Page.TurnOn("window.quickReference.turnOn1Message()")

    <p>
      This example passes data to the JS, so it can be parameterized:  <br>
      <strong id="turnOn2-message"></strong>
    </p>

    @* Tell TurnOn to trigger the JS and give it a string *@
    @Kit.Page.TurnOn("window.quickReference.turnOn2Message()", data: "Hello from Razor, the page Id is" + MyPage.Id)

    <p>
      We can also pass in more sophisticated data:  <br>
      <strong id="turnOn3-message"></strong>
    </p>
    @{
      // Create an anonymous object containing the data to send
      var turnOn3Data = new {
        domId = "turnOn3-message",
        message = "Hello from Razor...",
        pageId = MyPage.Id,
        pageUrl = MyPage.Url
      };
    }
    @* Tell TurnOn to trigger the JS and give it a complex object *@
    @Kit.Page.TurnOn("window.quickReference.turnOn3Message()", data: turnOn3Data)
  @qref.SnipEnd()
@accSection.End()



@* UniqueKey / Kit.Key.UniqueKeyWith *@
@((accSection = acc.Section("quickref-uniquekey-basic")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: new Dictionary<string, string> {
    { "Helper Razor", "file:shared-uniquekey-message.cshtml" },
    { "JS File", "file:js/unique-key.js" },
  })).SnipStart())
    @{
      var buttonId = "demo-uniquekey-btn-" + UniqueKey;
      var messageId = "demo-uniquekey-msg-" + UniqueKey;
    }
    @* Show the button *@
    <button type="button" id="@buttonId" class="btn btn-primary">
      Press this to see JS find the button using the UniqueKey: @buttonId
    </button>

    @* Create the DIV for the message - it's in another file, but shares the UniqueKey *@
    @Html.Partial("./shared-uniquekey-message.cshtml")

    @* Trigger the script, and pass in the IDs it will need based on the UniqueKey *@
    @Kit.Page.TurnOn("window.quickReference.demoUniqueQuey()", data: new { buttonId, messageId })
    @* Load the script - this can be before or after the TurnOn *@
    <script src="@MyView.Folder.Url/js/unique-key.js"></script>
  @qref.SnipEnd()



  <h3>Combined Unique Keys with UniqueKeyWith(...) - new v16.04 üåü</h3>
  <p>
    Sometimes you need a <code>UniqueKey</code> which also depends on other objects.
    For example, you may need to have a UniqueKey which also uses another value - or many.
    This is done using <code>@@Kit.Key.UniqueKeyWith(...)</code>.
  </p>
  @((qref = Sys.SourceCode.QuickRefSplit33()).SnipStart())
    <ol>
      <li>
        Unique Key with <code>12345</code>:
        <code>@Kit.Key.UniqueKeyWith(12345)</code>
      </li>
      <li>
        Unique Key with <code>"hello"</code>:
        <code>@Kit.Key.UniqueKeyWith("hello")</code>
      </li>
      <li>
        Unique Key with <code>"bad chars in id ! % / üëçüèΩ"</code>:
        <code>@Kit.Key.UniqueKeyWith("bad chars in id ! % / üëçüèΩ")</code>
      </li>
      <li>
        Unique Key with <code>"this is a long text and should be shortened"</code>:
        <code>@Kit.Key.UniqueKeyWith("this is a long text and should be shortened")</code>
      </li>
      <li>
        Unique Key with <code>12345</code> and <code>"hello"</code>:
        <code>@Kit.Key.UniqueKeyWith(12345, "hello")</code>
      </li>
    </ol>
  @qref.SnipEnd()
  


  <h3>Generate Unique Keys for Items/Entities - new v16.04 üåü</h3>
  <p>
    If the <code>UniqueKey</code> is based on known object types such as Entities, this works very well.
    For example, you may need to loop through a list of items, and each item needs a unique key.
  </p>
  @((qref = Sys.SourceCode.QuickRefSplit33()).SnipStart())
    @{
      var books = AsItems(App.Data["Books"]);
    }
    <ol>
      @foreach(var book in books) {
        <li>
          Title: <code>@book.Title</code> - UniqueKey: <code>@Kit.Key.UniqueKeyWith(book)</code>
        </li>
      }
    </ol>
  @qref.SnipEnd()
@accSection.End()