@inherits Custom.Hybrid.RazorTyped
@{
  // Sys helps generate code snippets etc.
  var Sys = GetCode("/shared/Helpers.cs").Init(this);
  // The accordion is an external helper file, so we must treat it as dynamic
  var acc = MyModel.Get("Accordion") as dynamic;
  // variable to hold each section config
  dynamic accSection;
  dynamic qref;

  // Variables for the tests
  string jsonRoot = MyView.Folder.PhysicalPath + "/Json/json";
  var dudeTabs = new Dictionary<string, string> {
    { "dude.json", "file:json/dude.json" },
  };
}

@((accSection = acc.Section("quickref-json-get")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: dudeTabs)).SnipStart())
  @{
    // Simple JSON strings which could come from a file or web service
    var jDude = System.IO.File.ReadAllText(jsonRoot + "/dude.json");

    // Convert the JSON to ITyped
    var dude = Kit.Json.ToTyped(jDude);
  }
  <ol>
    <li>
      <code>.Get("name")</code>: @dude.Get("Name")
    </li>
    <li>
      <code>.Get("NAME")</code> (insensitive): @dude.Get("NAME")
    </li>
  </ol>
  @qref.SnipEnd()
@accSection.End()


@((accSection = acc.Section("quickref-json-typed-get")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: dudeTabs)).SnipStart())
  <ol>
    <li>
      <code>.String("Name")</code> (typed): @dude.String("Name")
    </li>
    <li>
      <code>.Int("Age")</code>: @dude.Int("Age")
    </li>
    <li>
      Add using Int(...): <code>@(100 + dude.Int("Age"))</code>
    </li>
    <li>
      Add using String(...): <code>@(100 + dude.String("Age"))</code>
    </li>
  </ol>
  @qref.SnipEnd()
@accSection.End()

@functions {
  // Special accessors to shared code - required this setup so we can pass Func<...> to TryGet
  private dynamic TestHelpers { get { return  _testHelpers ?? (_testHelpers = GetCode("../TestHelpers.cs")); }}
  private object _testHelpers;

  public object TryGet(Func<object> func) { return TestHelpers.TryGet(func); }
}


@((accSection = acc.Section("quickref-json-strict")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: dudeTabs)).SnipStart())
  @{
    var strict = Kit.Json.ToTyped(jDude);
  }
  <ol>
    <li>
      <code>strict.String("Fake")</code> (typed):
      @* Note: TryGet is a tutorial-internal helper to show the error *@
      @TryGet(() => strict.String("Fake"))
    </li>
    <li>
      <code>strict.String("Fake", required: false)</code>:
      @strict.String("Fake", required: false)
    </li>
    <li>
      <code>strict.String("Fake", required: false, fallback: "undefined")</code>:
      @strict.String("Fake", required: false, fallback: "undefined")
    </li>
    <li>
      <code>strict.Int("Fake", required: false)</code>:
      @strict.Int("Fake", required: false)
    </li>
    <li>
      <code>strict.Int("Fake", required: false, fallback: -1)</code>:
      @strict.Int("Fake", required: false, fallback: -1)
    </li>
  </ol>
  @qref.SnipEnd()
@accSection.End()


@((accSection = acc.Section("quickref-json-loose")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: dudeTabs)).SnipStart())
  @{
    var loose = Kit.Json.ToTyped(jDude, propsRequired: false);
  }
  <ol>
    <li>
      <code>loose.String("Fake")</code> (typed):
      @loose.String("Fake")
    </li>
    <li>
      <code>loose.String("Fake")</code>:
      @loose.String("Fake")
    </li>
    <li>
      <code>loose.String("Fake", fallback: "I don't know!")</code>:
      @loose.String("Fake", fallback: "I don't know!")
    </li>
    <li>
      <code>loose.Int("Fake")</code>:
      @loose.Int("Fake", required: false)
    </li>
    <li>
      <code>loose.Int("Fake", fallback: -1)</code>:
      @loose.Int("Fake", fallback: -1)
    </li>
  </ol>
  @qref.SnipEnd()
@accSection.End()


@((accSection = acc.Section("quickref-json-nested")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(new Dictionary<string, string> {
    { "dude-marc.json", "file:json/dude-marc.json" },
    { "dude-frank.json", "file:json/dude-frank.json" },
  })).SnipStart())
  @{
    // Simple JSON strings which could come from a file or web service
    var jMarc = System.IO.File.ReadAllText(jsonRoot + "/dude-marc.json");
    var jFrank = System.IO.File.ReadAllText(jsonRoot + "/dude-frank.json");

    // Convert the JSON to ITyped
    var marc = Kit.Json.ToTyped(jMarc);
    var frank = Kit.Json.ToTyped(jFrank);
    var year = DateTime.Now.Year;
  }
  <h4>Marc</h4>
  <ol>
    <li>marc.ToString():
      <code>@marc.ToString()</code>
    </li>
    <li>name <code>.String("Name")</code>
      <code>@marc.String("Name")</code>
    </li>
    <li>age: <code>@marc.Get("Age")</code></li>
    <li>birth year:
      <code>@(year - marc.Int("Age"))</code>
    </li>
    <li>car make (will be null):
      <code>@marc.String("Car.Make", required: false)</code>
    </li>
    <li>
      Friends using <code>AsTypedList(...)</code>
      <ul>
        @foreach(var friend in AsTypedList(marc.Get("friends"))) {
          <li>@friend.String("Name")</li>
        }
      </ul>      
    </li>
  </ol>
  <h4>Frank</h4>
  <ol>
    <li>#2 frank.ToString():
      <code>@frank.ToString()</code>
    </li>
    <li>#2 name:
      <code>@frank.String("Name")</code>
    </li>
    <li>#2 car make:
      <code>@frank.String("Car.Make")</code>
    </li>
    <li>#2 car ToString():
      <code>@frank.Get("Car").ToString()</code>
    </li>
  </ol>
  @qref.SnipEnd()
@accSection.End()


@* Int Array *@
@((accSection = acc.Section("quickref-json-array-int")).Start())
  @Html.Partial("./Part Json.Int Array.cshtml")
@accSection.End()

@* Custom Object *@
@((accSection = acc.Section("quickref-json-class")).Start())
  @Html.Partial("./Part Json.Custom Class.cshtml")
@accSection.End()


@((accSection = acc.Section("quickref-json-array")).Start())
  @((qref = Sys.SourceCode.QuickRefSplit33(tabs: new Dictionary<string, string> {
    { "cities.json", "file:json/cities.json" },
  })).SnipStart())
  @{
    // Simple JSON strings which could come from a file or web service
    var jCities = System.IO.File.ReadAllText(jsonRoot + "/cities.json");

    // Convert the JSON to ITyped
    var cities = Kit.Json.ToTypedList(jCities);
  }
  <ol>
    @foreach(var city in cities) {
      <li>Name: <code>@city.String("Name")</code></li>
    }
  </ol>
  @qref.SnipEnd()
@accSection.End()



