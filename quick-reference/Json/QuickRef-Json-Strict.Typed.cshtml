@inherits Custom.Hybrid.RazorTyped
@{ var Sys = GetCode("/shared/Helpers.cs").Init(this); }


@{
  // Variables for the tests
  string jsonRoot = MyView.Folder.PhysicalPath + "/Json/json";
}

@functions {
  // Special accessors to shared code - required this setup so we can pass Func<...> to TryGet
  private dynamic TestHelpers { get { return  _testHelpers ?? (_testHelpers = GetCode("../TestHelpers.cs")); }}
  private object _testHelpers;

  public object TryGet(Func<object> func) { return TestHelpers.TryGet(func); }
}

@{ var qref = Sys.SourceCode.QuickRef(item: MyModel.Item("Item"), tabs: "file:json/dude.json" ); }
@qref.SnipStart()
  @{
    // Simple JSON strings which could come from a file or web service
    var jDude = System.IO.File.ReadAllText(jsonRoot + "/dude.json");
    var strict = Kit.Json.ToTyped(jDude);
  }
  <ol>
    <li>
      <code>strict.String("Fake")</code> (typed):
      @* Note: TryGet is a tutorial-internal helper to show the error *@
      @TryGet(() => strict.String("Fake"))
    </li>
    <li>
      <code>strict.String("Fake", required: false)</code>:
      @strict.String("Fake", required: false)
    </li>
    <li>
      <code>strict.String("Fake", required: false, fallback: "undefined")</code>:
      @strict.String("Fake", required: false, fallback: "undefined")
    </li>
    <li>
      <code>strict.Int("Fake", required: false)</code>:
      @strict.Int("Fake", required: false)
    </li>
    <li>
      <code>strict.Int("Fake", required: false, fallback: -1)</code>:
      @strict.Int("Fake", required: false, fallback: -1)
    </li>
  </ol>
@qref.SnipEnd()
