// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Books.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Books
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v18.03.00
// App/Edition: Tutorial-Razor/
// User:        2sic Web-Developer
using System.Collections.Generic;
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Books 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Books data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Authors`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Books: AutoGenerated.ZAutoGenBooks
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Books in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenBooks: Custom.Data.CustomItem
  {
    /// <summary>
    /// Authors as list of Persons.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type Persons was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<Persons> Authors => _authors ??= _item.Children<Persons>("Authors");
    private IEnumerable<Persons> _authors;

    /// <summary>
    /// Awards as single item of BookAwards.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type BookAwards was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public BookAwards Awards => _awards ??= _item.Child<BookAwards>("Awards");
    private BookAwards _awards;

    /// <summary>
    /// Cover as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Cover")
    /// </summary>
    public string Cover => _item.Url("Cover");

    /// <summary>
    /// Get the file object for Cover - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile CoverFile => _item.File("Cover");

    /// <summary>
    /// Get the folder object for Cover.
    /// </summary>

    [JsonIgnore]
    public IFolder CoverFolder => _item.Folder("Cover");

    /// <summary>
    /// Illustrators as single item of Persons.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Persons was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Persons Illustrators => _illustrators ??= _item.Child<Persons>("Illustrators");
    private Persons _illustrators;

    /// <summary>
    /// Teaser as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Teaser", scrubHtml: true) etc.
    /// </summary>
    public string Teaser => _item.String("Teaser", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}