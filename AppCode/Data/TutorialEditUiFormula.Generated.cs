// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "TutorialEditUiFormula.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class TutorialEditUiFormula
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.00
// App/Edition: Tutorial-Razor/
// User:        2sic Web-Developer
// When:        2024-03-28 18:17:21Z
namespace AppCode.Data
{
  // This is a generated class for TutorialEditUiFormula 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// TutorialEditUiFormula data. <br/>
  /// Generated 2024-03-28 18:17:21Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.ContentType`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class TutorialEditUiFormula: AutoGenerated.ZagTutorialEditUiFormula
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.TutorialEditUiFormula in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagTutorialEditUiFormula: Custom.Data.CustomItem
  {
    /// <summary>
    /// ContentType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ContentType", scrubHtml: true) etc.
    /// </summary>
    public string ContentType => _item.String("ContentType", fallback: "");

    /// <summary>
    /// Field as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Field", scrubHtml: true) etc.
    /// </summary>
    public string Field => _item.String("Field", fallback: "");

    /// <summary>
    /// Instructions as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Instructions", scrubHtml: true) etc.
    /// </summary>
    public string Instructions => _item.String("Instructions", fallback: "");

    /// <summary>
    /// Parameters as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Parameters", scrubHtml: true) etc.
    /// </summary>
    public string Parameters => _item.String("Parameters", fallback: "");

    /// <summary>
    /// ShowSnippet as bool. <br/>
    /// To get nullable use .Get("ShowSnippet") as bool?;
    /// </summary>
    public bool ShowSnippet => _item.Bool("ShowSnippet");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// TitleInResults as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TitleInResults", scrubHtml: true) etc.
    /// </summary>
    public string TitleInResults => _item.String("TitleInResults", fallback: "");

    /// <summary>
    /// TutorialId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TutorialId", scrubHtml: true) etc.
    /// </summary>
    public string TutorialId => _item.String("TutorialId", fallback: "");
  }
}