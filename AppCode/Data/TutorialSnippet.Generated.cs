// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "TutorialSnippet.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class TutorialSnippet
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.08.00
// App/Edition: Tutorial-Razor/
// User:        2sic Web-Developer
// When:        2024-05-21 19:46:38Z
using System.Collections.Generic;
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for TutorialSnippet 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// TutorialSnippet data. <br/>
  /// Generated 2024-05-21 19:46:38Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Credits`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class TutorialSnippet: AutoGenerated.ZAutoGenTutorialSnippet
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.TutorialSnippet in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenTutorialSnippet: Custom.Data.CustomItem
  {
    /// <summary>
    /// Credits as list of TutorialCredits.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type TutorialCredits was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<TutorialCredits> Credits => _credits ??= _item.Children<TutorialCredits>("Credits");
    private IEnumerable<TutorialCredits> _credits;

    /// <summary>
    /// Formula as single item of TutorialEditUiFormula.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type TutorialEditUiFormula was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public TutorialEditUiFormula Formula => _formula ??= _item.Child<TutorialEditUiFormula>("Formula");
    private TutorialEditUiFormula _formula;

    /// <summary>
    /// InDepthExplanation as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("InDepthExplanation", scrubHtml: true) etc.
    /// </summary>
    public string InDepthExplanation => _item.String("InDepthExplanation", fallback: "");

    /// <summary>
    /// InDepthImages as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("InDepthImages")
    /// </summary>
    public string InDepthImages => _item.Url("InDepthImages");

    /// <summary>
    /// Get the file object for InDepthImages - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile InDepthImagesFile => _item.File("InDepthImages");

    /// <summary>
    /// Get the folder object for InDepthImages.
    /// </summary>

    [JsonIgnore]
    public IFolder InDepthImagesFolder => _item.Folder("InDepthImages");

    /// <summary>
    /// Intro as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Intro", scrubHtml: true) etc.
    /// </summary>
    public string Intro => _item.String("Intro", fallback: "");

    /// <summary>
    /// IntroMoreDyn as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("IntroMoreDyn", scrubHtml: true) etc.
    /// </summary>
    public string IntroMoreDyn => _item.String("IntroMoreDyn", fallback: "");

    /// <summary>
    /// IntroMoreStrong as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("IntroMoreStrong", scrubHtml: true) etc.
    /// </summary>
    public string IntroMoreStrong => _item.String("IntroMoreStrong", fallback: "");

    /// <summary>
    /// IntroMoreTyped as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("IntroMoreTyped", scrubHtml: true) etc.
    /// </summary>
    public string IntroMoreTyped => _item.String("IntroMoreTyped", fallback: "");

    /// <summary>
    /// Note as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Note", scrubHtml: true) etc.
    /// </summary>
    public string Note => _item.String("Note", fallback: "");

    /// <summary>
    /// Notes as list of TutorialNote.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type TutorialNote was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<TutorialNote> Notes => _notes ??= _item.Children<TutorialNote>("Notes");
    private IEnumerable<TutorialNote> _notes;

    /// <summary>
    /// OutputAndSourceDisplay as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("OutputAndSourceDisplay", scrubHtml: true) etc.
    /// </summary>
    public string OutputAndSourceDisplay => _item.String("OutputAndSourceDisplay", fallback: "");

    /// <summary>
    /// OutputWidth as int. <br/>
    /// To get other types use methods such as .Decimal("OutputWidth")
    /// </summary>
    public int OutputWidth => _item.Int("OutputWidth");

    /// <summary>
    /// PageActivate as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PageActivate", scrubHtml: true) etc.
    /// </summary>
    public string PageActivate => _item.String("PageActivate", fallback: "");

    /// <summary>
    /// RefSharedSpecs as single item of TutorialSpecs.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type TutorialSpecs was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public TutorialSpecs RefSharedSpecs => _refSharedSpecs ??= _item.Child<TutorialSpecs>("RefSharedSpecs");
    private TutorialSpecs _refSharedSpecs;

    /// <summary>
    /// Tabs as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Tabs", scrubHtml: true) etc.
    /// </summary>
    public string Tabs => _item.String("Tabs", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// ToolbarsForAnonymous as bool. <br/>
    /// To get nullable use .Get("ToolbarsForAnonymous") as bool?;
    /// </summary>
    public bool ToolbarsForAnonymous => _item.Bool("ToolbarsForAnonymous");

    /// <summary>
    /// TutorialId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TutorialId", scrubHtml: true) etc.
    /// </summary>
    public string TutorialId => _item.String("TutorialId", fallback: "");

    /// <summary>
    /// Tutorials as list of TutorialGroup.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type TutorialGroup was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<TutorialGroup> Tutorials => _tutorials ??= _item.Children<TutorialGroup>("Tutorials");
    private IEnumerable<TutorialGroup> _tutorials;

    /// <summary>
    /// TutorialType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TutorialType", scrubHtml: true) etc.
    /// </summary>
    public string TutorialType => _item.String("TutorialType", fallback: "");

    /// <summary>
    /// XxxRefResources as list of TutorialResource.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type TutorialResource was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<TutorialResource> XxxRefResources => _xxxRefResources ??= _item.Children<TutorialResource>("XxxRefResources");
    private IEnumerable<TutorialResource> _xxxRefResources;

    /// <summary>
    /// XxxTutorials as list of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. 
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<ITypedItem> XxxTutorials => _xxxTutorials ??= _item.Children("XxxTutorials");
    private IEnumerable<ITypedItem> _xxxTutorials;
  }
}