// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "XxxTutorialViewMetadata.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class XxxTutorialViewMetadata
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Tutorial-Razor/
// User:        2sic Web-Developer
// When:        2024-04-04 20:28:06Z
using System;

namespace AppCode.Data
{
  // This is a generated class for XxxTutorialViewMetadata 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// XxxTutorialViewMetadata data. <br/>
  /// Generated 2024-04-04 20:28:06Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Deprecated`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class XxxTutorialViewMetadata: AutoGenerated.ZagXxxTutorialViewMetadata
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.XxxTutorialViewMetadata in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagXxxTutorialViewMetadata: Custom.Data.CustomItem
  {
    /// <summary>
    /// Deprecated as bool. <br/>
    /// To get nullable use .Get("Deprecated") as bool?;
    /// </summary>
    public bool Deprecated => _item.Bool("Deprecated");

    /// <summary>
    /// For2sxc as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("For2sxc", scrubHtml: true) etc.
    /// </summary>
    public string For2sxc => _item.String("For2sxc", fallback: "");

    /// <summary>
    /// ForDnn as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ForDnn", scrubHtml: true) etc.
    /// </summary>
    public string ForDnn => _item.String("ForDnn", fallback: "");

    /// <summary>
    /// ForOqtane as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ForOqtane", scrubHtml: true) etc.
    /// </summary>
    public string ForOqtane => _item.String("ForOqtane", fallback: "");

    /// <summary>
    /// LinkEmphasis as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkEmphasis", scrubHtml: true) etc.
    /// </summary>
    public string LinkEmphasis => _item.String("LinkEmphasis", fallback: "");

    /// <summary>
    /// LinkTeaser as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkTeaser", scrubHtml: true) etc.
    /// </summary>
    public string LinkTeaser => _item.String("LinkTeaser", fallback: "");

    /// <summary>
    /// LinkTitle as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkTitle", scrubHtml: true) etc.
    /// </summary>
    public string LinkTitle => _item.String("LinkTitle", fallback: "");

    /// <summary>
    /// New as DateTime.
    /// </summary>
    public DateTime New => _item.DateTime("New");

    /// <summary>
    /// Specs as single item of TutorialSpecs.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type TutorialSpecs was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public TutorialSpecs Specs => _specs ??= _item.Child<TutorialSpecs>("Specs");
    private TutorialSpecs _specs;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// TitleAuto as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TitleAuto", scrubHtml: true) etc.
    /// </summary>
    public string TitleAuto => _item.String("TitleAuto", fallback: "");

    /// <summary>
    /// Updated as DateTime.
    /// </summary>
    public DateTime Updated => _item.DateTime("Updated");
  }
}