@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("../shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })

  @* If we have ?Rzr14 in the url, show that code to verify it works *@
  @if (Sys.SourceCode.ShouldShowAltCodeFile()) {
    @Sys.SourceCode.ShowAltCodeFile(Html);
    return;
  }
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Working with URL Parameters using Page Parameters</h2>
    <p>
      The following code will use a value from the url querystring. There are various ways to pick it up, but we recommend the cross-platform API which works in Dnn and Oqtane.
    </p>
    <ol>
      <li>
        Pro mode Cross-Platform (Dnn and Oqtane): <code>@@MyPage.Parameters["id"]</code>
      </li>
      <li>
        Older mode Cross-Platform (Dnn and Oqtane): <code>@@CmsContext.Page.Parameters["id"]</code>
      </li>
      <li>
        This would <em>only</em> work in Dnn: <code>@@Request.QueryString["id"]</code>
      </li>
    </ol>
    <p>
      Usually you would have <code>somepagename?id=27</code> in the url, and then using <code>@@MyPage.Parameters["id"]</code> / <code>@@CmsContext.Page.Parameters["id"]</code> you would pick it up. <br>
      But with DNN, there is an additional processing that happens, as DNN tries to create nice URLs resulting in <code>somepagename/id/27</code>. But on the server, this is still treated as the <code>?id=27</code>, so you still use the same method to access it. 
    </p>
    <h2>Test changing this page URL</h2>
    <p>
      Below you'll find some links which change the url, so you can see how the output changes:
    </p>
  </div>
</div>

@Html.Partial("../Shared/Accordion/Accordion One.cshtml", new { Sys, NameId = "basics-linking" })

@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })