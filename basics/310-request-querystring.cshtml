@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("../shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })

  @* If we have ?Rzr14 in the url, show that code to verify it works *@
  @if (Sys.SourceCode.ShouldShowAltCodeFile()) {
    @Sys.SourceCode.ShowAltCodeFile(Html);
    return;
  }
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Working with URL Parameters using Page Parameters</h2>
    <p>
      The following code will use a value from the url querystring. There are various ways to pick it up, but we recommend the cross-platform API which works in Dnn and Oqtane.
    </p>
    <ol>
      <li>
        Pro mode Cross-Platform (Dnn and Oqtane): <code>@@MyPage.Parameters["id"]</code>
      </li>
      <li>
        Older mode Cross-Platform (Dnn and Oqtane): <code>@@CmsContext.Page.Parameters["id"]</code>
      </li>
      <li>
        This would <em>only</em> work in Dnn: <code>@@Request.QueryString["id"]</code>
      </li>
    </ol>
    <p>
      Usually you would have <code>somepagename?id=27</code> in the url, and then using <code>@@MyPage.Parameters["id"]</code> / <code>@@CmsContext.Page.Parameters["id"]</code> you would pick it up. <br>
      But with DNN, there is an additional processing that happens, as DNN tries to create nice URLs resulting in <code>somepagename/id/27</code>. But on the server, this is still treated as the <code>?id=27</code>, so you still use the same method to access it. 
    </p>
    <h2>Test changing this page URL</h2>
    <p>
      Below you'll find some links which change the url, so you can see how the output changes:
    </p>
  </div>
</div>

@((snip = Sys.SourceCode.OutputBoxAndSnippet()).SnipStart())
 <ul>
    <li><a href='@Link.To(parameters: "?basics310=page")'>This page without additional url-parameter</a></li>
    <li><a href='@Link.To(parameters: "?basics310=page&sort=ascending")'>This page with additional <code>sort=ascending</code></a></li>
  </ul>
@snip.SnipEnd()


<h3>Basics: just show a text-value of <code>sort</code> from the Query-String</h3>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#query-string")).SnipStart())
  <ul>
    <li>URL contains <code>sort</code> using null-check: 
      @(MyPage.Parameters["sort"] != null)
    </li>
    <li>URL contains <code>sort</code> using <a href="https://github.com/DNN-Connect/razor-blade" target="_blank">Razor.Blade</a> (this will also return false, if sort is empty):
      @Text.Has(MyPage.Parameters["sort"])
    </li>
    <li>Sort value from URL:
      @MyPage.Parameters["sort"]
    </li>
    <li>
      Put <code>sort</code> in a variable for further use:
      @{
        var sort = MyPage.Parameters["sort"];
      }
      @sort
    </li>
    <li>
      Get sort from url, or if it doesn't exist, use a default value <code>descending</code> (uses <a href="https://github.com/DNN-Connect/razor-blade" target="_blank">Razor.Blade</a>):
      @{
        sort = Text.First(MyPage.Parameters["sort"], "descending");
      }
      @sort
    </li>
  </ul>
@snip.SnipEnd()


@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })