@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = CreateInstance("../shared/Helpers.cs").Init(this); }
  @Html.Partial("header.cshtml", new { Sys = Sys })
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/_DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Safely Linking URLs with Umlauts and similar</h2>
  </div>
</div>


@Sys.SourceCode.SnippetInlineStart("basic-safe-url")
  @{
    var path = App.Path + "/basics/assets/urls/";
    var exampleImgName = "gÃ¶Ã¶gle plus.png";
    var resizeParameters = "?w=100";
    var safeUrl = Tags.SafeUrl(path + exampleImgName + resizeParameters);
  }
  <p>
    ðŸ‘ˆ this image is called <code>@exampleImgName</code> - which must be encoded to <code>@Tags.SafeUrl(exampleImgName)</code>
  </p>
  <img loading="lazy" src='@safeUrl' id="demo-logo">
@Sys.SourceCode.SnippetInlineEnd()

<hide>
<p>
  Sometimes you have files with unexpected characters - like umlauts or spaces. The best way to encode this is using <code>Tags.SafeUrl(...)</code> from RazorBlade, or <code>Uri.EscapeUriString(...)</code> from .net. 
</p>
<h3>Important notes</h3>
<ul>
  <li>
    Two characters won't resolve properly on a standard web server: <code>+</code> and <code>%</code>. There are ways to work around this, but we would avoid them at all cost. 
  </li>
  <li>
    Other characters like <code>spaces</code>, umlauts (<code>Ã¶Ã¤Ã¨</code>) etc. are no problem. 
  </li>
  <li>
    You may also find suggestions to use <code>Server.UrlEcode(...)</code>. This often doesn't work! 
  </li>
  <li>
    Remember to add <code>@@using System</code> to make this fly
  </li>
</ul>

<style>
  #demo-logo {
    width: 50px;
    padding-right: 20px;
  }
</style>

@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })