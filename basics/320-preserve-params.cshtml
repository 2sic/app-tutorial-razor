@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
<hide>
  @* Sys must always be an exact copy of this line, so that we could search/replace *@
  @{ var Sys = GetCode("../shared/Helpers.cs").Init(this); }
  @{ dynamic snip = null; }
  @Html.Partial("header.cshtml", new { Sys = Sys })

  @* If we have ?Rzr14 in the url, show that code to verify it works *@
  @if (Sys.SourceCode.ShouldShowAltCodeFile()) {
    @Sys.SourceCode.ShowAltCodeFile(Html);
    return;
  }
</hide>


<div @Sys.PageParts.InfoWrapper()>
  @Html.Partial("../shared/DefaultInfoSection.cshtml")
  <div @Sys.PageParts.InfoIntro()>
    <h2>Preserve URL parameters</h2>
    <h3>Create a link to the same page</h3>
    <p>
      In Razor page URLs are generated using <code>Link.To(...)</code>. 
      By default calling <code>Link.To()</code> without any parameters returns the base URL of the site. In this case it would be: <code>@Link.To()</code>. 
    </p>
    <p>
      The key to retrieving the current page URL is to pass the current page parameters. <code>Link.To(parameters: ...)</code> will then construct the URL based on the passed parameters. <br>
      Current page parameters are found in <code>CmsContext.Page.Parameters</code>.
    </p>
  </div>
</div>


@* TODO: @2dg *@
@Html.Partial("../Shared/Accordion/Accordion One.cshtml", new { Sys, NameId = "basics-linking-parameters" })

<h2>Link to current page with all Parameters</h2>


@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#current-params")).SnipStart())
  @{ var currentPageUrl = Link.To(parameters: MyPage.Parameters); }
  <ol>
    <li><a href='@Link.To()'>Link to current page <em>without</em> Parameters: @Link.To()</a></li>
    <li><a href='@currentPageUrl'>Link to current page preserving parameters @currentPageUrl</a></li>
  </ol>
@snip.SnipEnd()



<hide>
<h3>Add Parameters</h3>
<p>
  Because <code>MyPage.Parameters</code> / <code>CmsContext.Page.Parameters</code> follows <a target="blank" href="https://en.wikipedia.org/wiki/Query_string#Structure">the query string convention</a> adding a new parameter isn't too difficult. <br> 
  To add a new parameter you can use the <code>.Add(key, value)</code> method or add the parameters as string following the convention as for example <code>&name=2sxc</code>.<br>
</p>

</hide>
<p>See current page parameters: <code>@MyPage.Parameters</code></p>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#new-params")).SnipStart())
 @{
    // Example using string
    var newParamsFromString = MyPage.Parameters + "&name=2sxc";

    // Page parameters using .Add(...) method
    var newParamsFromAdd = MyPage.Parameters.Add("name", "2sxc");
  }
<hide>
  <p>See adjusted page parameters: <code>@newParamsFromAdd</code></p>
</hide>
  <p>Current page URL with new parameter from string: @Link.To(parameters: newParamsFromString)</p>
  <p>Current page URL with new parameter from <code>.Add(...)</code>: @Link.To(parameters: newParamsFromAdd)</p>
@snip.SnipEnd()



<hide>
<h3>Remove Parameters</h3>
<p>
  To remove a parameter you can use the <code>.Remove(key)</code> method or modify the string containing parameters.<br>
</p>
</hide>
<p>See current page parameters: <code>@MyPage.Parameters</code></p>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#remove-params")).SnipStart())
  @{
    var currentParamsRemoved = MyPage.Parameters.Remove("basics320");
  }
  <hide>
  <p>See adjusted page parameters: <code>@currentParamsRemoved</code></p>
  </hide>
  <p>Current page URL with removed parameter: @Link.To(parameters: currentParamsRemoved)</p>
@snip.SnipEnd()



<hide>
<h3>Change Parameters</h3>
<p>
  To change a parameter you can use the <code>.Set(key, value)</code> method or modify the string containing parameters.<br>
</p>
</hide>

<p>See current page parameters: <code>@MyPage.Parameters</code></p>

@((snip = Sys.SourceCode.TabsOutputAndSource(tabs: "Rzr14#change-params")).SnipStart())
  @{
    var currentParamsChanged = MyPage.Parameters.Set("basics320", "2sxc");
  }
  <hide>
  <p>See adjusted page parameters: <code>@currentParamsChanged</code></p>
  </hide>
  <p>Current page URL with changed parameter: @Link.To(parameters: currentParamsChanged)</p>
@snip.SnipEnd()



@* Footer *@
@Html.Partial("../Shared/Layout/FooterWithSource.cshtml", new { Sys = Sys })